<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python中socket套接字send与sendall的区别</title>
      <link href="/posts/377229865.html"/>
      <url>/posts/377229865.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://img2018.cnblogs.com/blog/1566001/201902/1566001-20190222142636591-1869797938.png"><img src="https://img2018.cnblogs.com/blog/1566001/201902/1566001-20190222142636591-1869797938.png" alt="img"></a></p><p>将数据发送到套接字。 套接字必须连接到远程套接字。 返回发送的字节数。 应用程序负责检查是否已发送所有数据; 如果仅传输了一些数据，</p><p>则应用程序需要尝试传递剩余数据。(需要用户自己完成)</p><p><a href="https://img2018.cnblogs.com/blog/1566001/201902/1566001-20190222142703046-205626628.png"><img src="https://img2018.cnblogs.com/blog/1566001/201902/1566001-20190222142703046-205626628.png" alt="img"></a></p><p>将数据发送到套接字。 套接字必须连接到远程套接字。 与send（）不同，此方法继续从字符串发送数据，直到所有数据都已发送或发生错误。</p><p>成功后不返回任何内容。 出错时，会引发异常，并且无法确定成功发送了多少数据（如果有）。</p><p># 发送TCP数据 send()的返回值是发送的字节数量，</p><p>#这个数量值可能小于要发送的string的字节数，</p><p># 也就是说可能无法发送string中所有的数据。如果有错误则会抛出异常。</p><p>s.send()  </p><pre class="line-numbers language-python"><code class="language-python">不是socket自己会运行这个机制<span class="token punctuation">,</span>需要用户自己写<span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token keyword">def</span> mysend<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>        totalsent <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> totalsent <span class="token operator">&lt;</span> MSGLEN<span class="token punctuation">:</span>            sent <span class="token operator">=</span>sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">[</span>totalsent<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> sent <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">"socket connection broken"</span><span class="token punctuation">)</span>            totalsent <span class="token operator">=</span> totalsent <span class="token operator">+</span> sent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　</p><p># 发送TCP数据，sendall（）尝试发送string的所有数据，成功则返回None,失败则抛出异常。</p><h2 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充#"></a>知识补充<a href="https://www.cnblogs.com/ellisonzhang/p/10418313.html#%E7%9F%A5%E8%AF%86%E8%A1%A5%E5%85%85">#</a></h2><p>首先会对一些常见的网络编程知识进行补充下:</p><blockquote><p>MTU</p></blockquote><p>通信术语 最大传输单元（<code>Maximum Transmission Unit，MTU</code>）是指一种通信协议的某一层上面所能通过的最大数据包大小（以字节为单位）</p><p>以以太网传送<code>IPv4</code>报文为例。<code>MTU</code>表示的长度包含IP<a href="https://www.baidu.com/s?wd=%E5%8C%85%E5%A4%B4&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd">包头</a>的长度，如果IP层以上的协议层发送的数据报文的长度超过了<code>MTU</code>，则在发送者的IP层将对数据报文进行分片，在接收者的IP层对接收到的分片进行重组。</p><blockquote><p>TCP传输的可靠性</p></blockquote><ul><li>应用数据被分割成<code>TCP</code>认为最适合发送的数据块(根据<code>MTU</code>设定)。这和<code>UDP</code>完全不同，应用程序产生的数据长度将保持不变。由<code>TCP</code>传递给IP的信息单位称为报文段或段（<code>segment</code>）。</li><li>当<code>TCP</code>发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。当<code>TCP</code>收到发自<code>TCP</code>连接另一端的数据，它将发送一个确认。<code>TCP</code>有延迟确认的功能，在此功能没有打开，则是立即确认。功能打开，则由定时器触发确认时间点。</li><li><code>TCP</code>将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，<code>TCP</code>将丢弃这个报文段和不确认收到此报文段（希望发端超时并重发）。</li><li>既然TCP报文段作为IP数据报来传输，而IP数据报的到达可能会失序，因此<code>TCP</code>报文段的到达也可能会失序。如果必要，<code>TCP</code>将对收到的数据进行重新排序，将收到的数据以正确的顺序交给应用层。</li><li>既然IP数据报会发生重复，<code>TCP</code>的接收端必须丢弃重复的数据。</li><li><code>TCP</code>还能提供流量控制。<code>TCP</code>连接的每一方都有固定大小的缓冲空间。<code>TCP</code>的接收端只允许另一端发送接收端缓冲区所能接纳的数据。这将防止较快主机致使较慢主机的缓冲区溢出。</li></ul><blockquote><p>send()</p></blockquote><p>使用<code>send()</code>进行发送的时候，<code>Python</code>将内容传递给系统底层的<code>send</code>接口,也就是说，<code>Python</code>并不知道这次调用是否会全部发送完成，比如<code>MTU</code>是1500，但是此次发送的内容是2000，那么除了包头等等其他信息占用，发送的量可能在1000左右，还有1000未发送完毕</p><p>但是，<code>send()</code>不会继续发送剩下的包，因为它只会发送一次，发送成功之后会返回此次发送的字节数，如上例，会返回数字1000给用户，然后就结束了</p><p>如果需要将剩下的1000发送完毕，需要用户自行获取返回结果，然后将内容剩下的部分继续调用<code>send()</code>进行发送</p><blockquote><p>sendall()</p></blockquote><p><code>sendall()</code>是对<code>send()</code>的包装，完成了用户需要手动完成的部分，它会自动判断每次发送的内容量，然后从总内容中删除已发送的部分，将剩下的继续传给<code>send()</code>进行发送；</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-socket-server</title>
      <link href="/posts/2503312173.html"/>
      <url>/posts/2503312173.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>网络上关于socket的介绍文章数不胜数。自己记录下学习的点点滴滴。以供将来复习学习使用。</p><p>socket中文的翻译是套接字，总感觉词不达意。简单的理解就是ip+port形成的一个管理单元。也是程序中应用程序调用的接口。</p><p>在这里我们就介绍如何启动tcp 的server。</p><p>tcp连接中server部分，启动一个ip和port口，在这个port口监听，当收到client发来的请求，用一个新的端口port2同client建立连接。</p><p>socket启动监听的过程就是：</p><p>创建socket</p><p>bind端口</p><p>开始监听</p><p>建立连接+继续监听</p><p>代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''This is a testing programthe program is used to start server'''</span><span class="token keyword">import</span> socket<span class="token keyword">import</span> sys <span class="token keyword">def</span> <span class="token function">start_tcp_server</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#create socket</span>    sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>         server_address <span class="token operator">=</span> <span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#bind port</span>    <span class="token keyword">print</span> <span class="token string">'starting listen on ip %s, port %s'</span><span class="token operator">%</span>server_address    sock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>server_address<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">#starting listening, allow only one connection</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        sock<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> socket<span class="token punctuation">.</span>error<span class="token punctuation">,</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"fail to listen on port %s"</span><span class="token operator">%</span>e        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>             <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"waiting for connection"</span>        client<span class="token punctuation">,</span>addr <span class="token operator">=</span> sock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">'having a connection'</span>        client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start_tcp_server<span class="token punctuation">(</span><span class="token string">'10.20.0.20'</span><span class="token punctuation">,</span> <span class="token number">12345</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里有一个常用技巧，在start_tcp_server中，我们最常用到的是本机的ip，为了程序的通用性，最好使用调用函数的方式获取ip地址。</p><p>用到两个函数socket.gethostname与socket.gethostbyname(‘name’)</p><p>ip = socket.gethostbyname(socket.gethostname())</p><p>但是问题是一般情况下得到的ip地址为127.0.0.1。</p><p>如果想使用配置或dhcp获取的ip，如何做？实验当中。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JMeter RabbitMQ采样器AMQP详解与实战</title>
      <link href="/posts/1885269627.html"/>
      <url>/posts/1885269627.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="1-摘要"><a href="#1-摘要" class="headerlink" title="1 摘要"></a>1 摘要</h5><p>JMeter是性能测试中使用非常广泛的工具之一，其中让JMeter能够大放异彩的扩展插件异常重要。本文介绍测试RabbitMQ的扩展插件：AMQP采样器。不同于其他采样器，该插件的使用需要从源码中编译后使用。本文首先对RabbitMQ、AMQP、MQTT等基本概念进行了简要说明。之后将AMQP插件的安装过程，源码编译方法等进行详细说明。之后对该插件的使用方法进行详解，详细介绍采样器中每个字段的含义。最后通过一个实际的JMeter用例说明AMQP采样器的使用方法。</p><p>本文虽然主要介绍AMQP采样器，其实也间接介绍了JMeter的插件知识，从这个角度来看，JMeter有非常好的扩展性，能够实现测试中非常丰富的需求。</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/2019/03/08/77966467fc0c4ac6a3b97e25f38a8377.jpeg&thumbnail=650x2147483647&quality=80&type=jpg" alt="img"></p><h5 id="2-关键字"><a href="#2-关键字" class="headerlink" title="2 关键字"></a>2 关键字</h5><p>JMeter AMQP RabbitMQ</p><h5 id="3-RabbitMQ简介"><a href="#3-RabbitMQ简介" class="headerlink" title="3 RabbitMQ简介"></a>3 RabbitMQ简介</h5><p>要了解RabbitMQ，首先要了解几个基本概念：MQ、JMS、AMQP、MQTT。</p><p>MQ是Message Queue的简称，即消息队列。队列我们可以理解为管道。以管道的方式做消息传递。消息传递作为基本通信机制已经在全世界成功运用。无论是人与人、机器与人还是机器与机器之间，消息传递一直都是唯一常用的通信方式。在双方（或更多）之间交换消息有两种基本机制。</p><p>首先出现的是Java消息传递服务（Java Messaging Service (JMS)）。JMS是最成功的异步消息传递技术之一。随着Java在许多大型企业应用中的使用，JMS就成为了企业系统的首选。它定义了构建消息传递系统的API。</p><p>为了通用性，高级消息队列协议（AdvancedMessage Queueing Protocol (AMQP)）应运而生。JMS非常棒而且人们也非常乐意使用它。微软开发了NMS（.NET消息传递服务）来支持他们的平台和编程语言，它效果还不错。但是碰到了互用性的问题。两套使用两种不同编程语言的程序如何通过它们的异步消息传递机制相互通信呢。此时就需要定义一个异步消息传递的通用标准。JMS或者NMS都没有标准的底层协议。它们可以在任何底层协议上运行，但是API是与编程语言绑定的。AMQP解决了这个问题，它使用了一套标准的底层协议，加入了许多其他特征来支持互用性，为现代应用丰富了消息传递需求。</p><p>后来又出现了消息队列遥测传输（MessageQueueing Telemetry Transport (MQTT)）。已经有了面向基于Java的企业应用的JMS和面向所有其他应用需求的AMQP。为什么我们还需要第三种技术？它是专门为小设备设计的。计算性能不高的设备不能适应AMQP上的复杂操作，它们需要一种简单而且可互用的方式进行通信。这是MQTT的基本要求，而如今，MQTT是物联网（IOT）生态系统中主要成分之一。</p><p>JMS、AMQP、MQTT都是MQ的协议，是需要遵循的一套标准。正如需要TCP/IP来实现OSI七层规范一样，真正在使用的是这些协议的实现。JMS本身有一套Java API可以实现JMS，同时ActiveMQ也支持JMS。事实上，现在流行的MQ实现，都支持多种协议，比如阿里巴巴的RocketMQ ，支持JMS、MQTT。</p><p>今天介绍的 RabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。作为一款优秀的AMQP实现，在很多系统中作为消息中间件使用。</p><p>测试RabbitMQ在实际系统中的性能有很多方法，其中使用JMeter的AMQP插件是比较简单的实现方案。</p><h5 id="4-插件安装说明"><a href="#4-插件安装说明" class="headerlink" title="4 插件安装说明"></a>4 插件安装说明</h5><p>JMeter插件安装非常简单，只要将扩展插件的jar包拷贝到\lib\ext文件夹下即可。不过AMQP插件只有源码，需要自行编译。</p><p>首先在如下路径下载源码：</p><p><a href="https://github.com/jlavallee/JMeter-Rabbit-AMQP%E3%80%82">https://github.com/jlavallee/JMeter-Rabbit-AMQP。</a></p><p>如果安装了ant，并且了解ivy，可以直接使用工程的ivy.xml进行编译，生成JMeterAMQP.jar。或者根据ivy.xml的依赖配置，手工下载依赖的jar包，具体需要的jar如下：amqp-client-3.5.1.jar，ApacheJMeter_core.jar，</p><p>avalon-logkit-2.0.jar，commons-codec-1.4.jar，</p><p>commons-collections-3.2.1.jar，commons-httpclient-3.1.jar，</p><p>commons-io-1.4.jar，commons-jexl-2.1.1.jar，</p><p>commons-lang3-3.1.jar，commons-logging-1.1.1.jar，</p><p>commons-net-1.4.1.jar，jorphan-2.6.jar。</p><p>加入到build path后，编译生成JMeterAMQP.jar。</p><p>之后将JMeterAMQP.jar拷贝到JMeter的\lib\ext路径。</p><p>常见问题：拷贝JMeterAMQP.jar后，打开JMeter无法看到AMQP采样器，日志报错如下：</p><p>需要将amqp-client-3.5.1.jar也拷贝到\lib\ext路径下。再次打开JMeter就可以添加AMQP采样器了。</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/OC68aeWWk2la20GBnfxH0OuRbqhA1BvWGSithLIdPXgXx1552018551142.jpg&thumbnail=650x2147483647&quality=80&type=jpg" alt="img"></p><p>直接下载的AMQP插件自己的Publisher和Consumer传递消息没有问题，和其他组件配合使用时中文会出现乱码。修改源码中对消息体的获取，以Consumer为例，修改类com.zeroclue.jmeter.protocol.amqp.AMQPConsumer，将获取返回结果的代码修改如下内容：</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/urml2G0iwpAlraXxLzZSQNouxQtzUZjYz9NNxTXF9ff0x1552018551145.png&thumbnail=650x2147483647&quality=80&type=jpg" alt="img"></p><p>修改为：</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/c3xlGCwBAby9vvyjbiVmToPl9MzQ4ALmRTHvQg2wGH4TJ1552018551146.png&thumbnail=650x2147483647&quality=80&type=jpg" alt="img"></p><p>重新编译后替换JMeterAMQP.jar即可解决中文乱码问题。</p><h5 id="5-插件使用说明"><a href="#5-插件使用说明" class="headerlink" title="5 插件使用说明"></a>5 插件使用说明</h5><p>AMQP插件在JMeter中的使用，与其他采样器一致，直接增加到线程组中即可。根据对消息队列的贡献不同，分为发布者和消费者，前者作用是向指定的消息队列中发送消息，后者是在指定的消息队列中收取消息。在AMQP插件中分别为AMQP Publisher和AMQP Consumer。</p><h6 id="5-1-AMQP-Publisher"><a href="#5-1-AMQP-Publisher" class="headerlink" title="5.1 AMQP Publisher"></a>5.1 AMQP Publisher</h6><p>添加后的AMQPPublisher采样器如图所示。分两部分进行介绍。</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/wp09Dv80wicgeJeJdCI9ndDPXSV=AIY0SACyT6jo1mZih1552018551149.jpg&thumbnail=650x2147483647&quality=80&type=jpg" alt="img"></p><p>上图的4个方面是消息的基本信息。包括如下内容：</p><p>1、采样器的名称和备注。这是JMeter所有采样器的属性，用来进行线程组的采样管理。建议取有意义的名字。</p><p>2、交换机信息。如果需要发送的MQ消息是以交换机的方式进行消息传递，需要配置。如果不需要则配置“Exchange”属性为空即可。具体的属性含义如下。</p><p>Exchange：交换机名称，默认为jmeterExchange。RabbitMQ消息传递通过交换机或队列模型进行，需要根据实际系统定义情况进行配置。</p><p>Exchange Type：交换机类型，规定了消息的路由策略，根据实际的消息交换机类型进行配置，可选为direct,topic,headers,fanout。</p><p>Durable?：交换机的持久化属性。持久化队列和非持久化队列的区别是，持久化队列会被保存在磁盘中，固定并持久的存储，当服务重启后，该队列会保持原来的状态在RabbitMQ中被管理，而非持久化队列不会被保存在磁盘中，服务重启后队列就会消失。</p><p>Auto Delete?：交换机的自动删除属性。如果该交换机没有任何订阅的消费者的话，该交换机会被自动删除。这种队列适用于临时队列。</p><p>Redeclare?：该交换机是否可以重新声明。当声明的交换机Durable?或者Auto Delete?与已经存在交换机不一致，会出现类似如下错误：</p><p>Caused by:com.rabbitmq.client.ShutdownSignalException: channel error; protocol method: #method&lt;channel.close&gt;(reply-code=406,reply-text=PRECONDITION_FAILED - inequivalent arg ‘durable’ for exchange’jmeterExchange’ in vhost ‘/‘: received ‘false’ butcurrent is ‘true’, class-id=40, method-id=10)</p><p>所以AMQP插件增加了重新声明属性，当交换机声明与已经存在的不一致时，如果勾选了可重新声明，会将原交换机删除，重新定义一个新的。</p><p>3、队列信息。如果需要发送的MQ消息是以队列的方式进行消息传递，需要配置。如果不需要则配置“Queue”属性为空即可。具体的属性含义如下。<br>Queue：队列名称，默认为jmeterQueue。</p><p>Routing Key：队列的路由关键字，通过路由关键字的设定，可以完成多个消息统一处理的需求。对于队列的方式，需要与队列名称一致。</p><p>Durable?、Auto Delete?、Redeclare?属性的作用与交换机类似。</p><p>Exclusive?：队列的排他性属性。如果想创建一个只有自己可见的队列，即不允许其它用户访问，可以将一个Queue声明成为排他性的（Exclusive Queue）。</p><p>Message TTL：Time-To-Live，消息过期时间，单位为毫秒。</p><p>Expires：队列的超期时间，单位为毫秒。该值必须为正数(与消息 TTL 不同，该值不可以为 0)，所以如果该参数设置为 1000 ，则表示该队列如果在 1 秒钟之内未被使用则会被删除。</p><p>4、RabbitMQ服务信息。RabbitMQ服务的连接信息。具体包括如下属性。</p><p>Virtual HOST：使用的RabbitMQ服务虚拟主机信息。通过虚拟主机可以在服务器上划分多个虚拟空间，起到消息隔离的作用，默认为根目录“/”。</p><p>Host：RabbitMQ服务所在主机IP或名称，使用名称时需要保证DNS正确性。</p><p>Port：RabbitMQ服务所在端口，默认为5672。</p><p>Username：使用RabbitMQ服务的用户名。</p><p>Password：使用RabbitMQ服务的密码。</p><p>Timeout：连接RabbitMQ服务的超时时间，单位为毫秒。</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/8jQsKMiHjpgJL7RcXlA84OQsNfHdGo7ZiD3Y5quW23uc81552018551149.jpg&thumbnail=650x2147483647&quality=80&type=jpg" alt="img"></p><p>上图的4个方面是具体发送的消息信息。</p><p>1、发送消息条数。Number ofsamples to Aggregate表示AMQP采样器工作一次发送几条消息。</p><p>2、消息属性。具体包括如下信息。</p><p>Persistent?：消息的持久化属性。设置了持久化的消息，即使当时Consumer没有在监听，等Consumer启动后也能够收到该消息。反之，如果当时Consumer没有监听，则无法获取消息。</p><p>Use Transactions？:是否将发送消息通道设置为事务模式。事务能够解决Publisher与消息服务之间消息确认的问题，只有消息成功被服务接受，事务提交才能成功，否则我们便可以在捕获异常进行事务回滚操作同时进行消息重发，但是使用事务机制的话会降低RabbitMQ的性能。</p><p>Routing Key：消息的路由关键字。队列方式需要与队列名称一致，交换机方式根据实际需求设定。</p><p>Message Type：消息类型属性。可以自定义消息的类型，如String,Object等。</p><p>Reply-To Queue：用于指定回复的队列的名称。该属性是业务流程的需要，不会自动创建指定的回复队列。</p><p>Correlation Id：消息的关联ID。当存在多个计算节点时，通过该属性是的每个线程确定收到的消息与该线程对应。</p><p>ContentType：消息扩展类型。与HTTP中的相同字段意义一致，可以是text/plain，JSON等。</p><p>Message Id：消息的ID。通过设定消息ID，完成业务上的某些需求。</p><p>3、消息头信息。Key-value格式设置头信息，可以是任意的进行业务逻辑的数据。</p><p>4、消息体。实际发送的消息内容。</p><p>通过AMQP Publisher采样器发送的消息，通过RabbitMQ的Web管理界面可以进行查看，下面是在管理界面获取一个消息的示例。</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/AEkLpG0m3tJqRDNMignrbDN3xXp9aMc94h8qU83s3Udxn1552018551150.png&thumbnail=650x2147483647&quality=80&type=jpg" alt="img"></p><h6 id="5-2-AMQP-Consumer"><a href="#5-2-AMQP-Consumer" class="headerlink" title="5.2 AMQP Consumer"></a>5.2 AMQP Consumer</h6><p>添加后的AMQPConsumer采样器如图所示。大部分参数与AMQP Publisher一致，分两部分简单介绍。</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/1HuBf1zaefjOdc4fkpTyQ7xIU9N1aoWtGtrrngaKerSpt1552018551150.jpg&thumbnail=650x2147483647&quality=80&type=jpg" alt="img"></p><p>上图的4个方面是消息的基本信息。包括1、采样器的名称和备注，2、交换机信息，3队列信息，4、RabbitMQ服务信息，参数与AMQP Publisher一致。测试中需要按实际需要进行配置。</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/Fz=dc5TCTX72mniBKTlknEDcPzXDTP6ZuHs2QZuv6RpQi1552018551150.png&thumbnail=650x2147483647&quality=80&type=jpg" alt="img"></p><p>上图的2个方面是具体接收的消息设置。</p><p>1、接收设置。接收消息本身的属性。</p><p>Number of samples to Aggregate表示AMQP采样器工作一次消费几条消息。</p><p>Reccive Timeout：接收超时时间。即等待设置时间没有收到消息则退出，单位毫秒。</p><p>PrefetchCount：直观理解是预先获取的消息条数。Prefetch Count允许为每个Consumer指定最大的unacked messages数目。简单来说就是用来指定一个Consumer一次可以从消息中心中获取多少条message并缓存。一旦缓冲区满了，会停止投递新的message给该Consumer，直到它发出ack。</p><p>2、队列操作。接收消息时对队列本身的处理。具体包括如下信息。</p><p>Purge Queue：清除队列。消费消息后将队列清空。</p><p>Auto ACK：自动应答属性。在订阅消息的时候可以指定应答模式，当自动应答等于true的时候，表示当消费者一收到消息就表示消费者收到了消息，消费者收到了消息就会立即从队列中删除。</p><p>Read Response：读取消息内容。一般情况都是要读取消息体的。</p><p>3、UseTransactions？:与AMQP Publisher含义一致。</p><p>通过AMQP Consumer采样器可以获取在RabbitMQ的Web管理界面发布的消息。下面是在管理界面发布的消息。</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/4au4QFE9GI8YNTREC6OuxLynj5cMDK5Z5n6phNmDYV7GH1552018551150.jpg&thumbnail=650x2147483647&quality=80&type=jpg" alt="img"></p><p>之后，通过AMQP Consumer采样器获取该消息。</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/TYAkXsffqdaTOWGiRNfyc4t2jfm5NnIDXJjG=v6P6ahcu1552018551150.jpg&thumbnail=650x2147483647&quality=80&type=jpg" alt="img"></p><h5 id="6-实战AMQP采样器"><a href="#6-实战AMQP采样器" class="headerlink" title="6 实战AMQP采样器"></a>6 实战AMQP采样器</h5><p>根据实际业务的测试需求，AMQP采样器可以单独使用，也可以组合与其他JMeter元件配合完成测试。下面以一个使用AMQP测试业务模块处理能力的完整用例进行说明，业务流程是定时完成对集群中计算节点的状态查询操作，通过查询获取计算节点的状态（存活、资源占用等），查询操作通过RabbitMQ消息发送。目前需要测试查询操作的相关性能，设计的主要测试流程如下。</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/u85JutBqu1Hq9NdWQCi57thG9VuyRLrozQaJ0vB5ixNck1552018551150.png&thumbnail=650x2147483647&quality=80&type=jpg" alt="img"></p><p>1）通过JMeter的AMQP Publisher采样器，向MQ消息中心的查询队列发送消息，消息中携带节点IP地址和需要获取的状态信息。</p><p>2）查询模块处理消息。将节点IP、状态信息提取出来，并通过Reply-ToQueue字段提取返回队列的名称。之后对该节点发起查询操作。</p><p>3）计算节点对查询操作做出响应。</p><p>4）查询模块接收查询结果，将结果整理为MQ消息体，发送到返回队列中。</p><p>5）通过JMeter的AMQP Consumer采样器，处理返回的消息。</p><p>完整的JMeter脚本编写如下。</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/Sbb0c2698Jl0JdBZi3B2=d=riLJLnL6MnE6NLSu0y9B2O1552018551153.jpg&thumbnail=650x2147483647&quality=80&type=jpg" alt="img"></p><p>JMeter元件说明如下。</p><p>1）变量定义元件。定义连接的RabbitMQ地址、端口、用户名和密码。</p><p>2）获取节点信息元件是一个CSVData Set Config，用来在配置文件中获取节点的IP地址、端口、管理ID。如下图。并发线程的个数，与能够查询的节点个数，会影响最终的测试结果。如果仅仅放置一个待查询节点，那么该节点本身的响应有可能成为处理的瓶颈，从而无法验证查询模块自身的极限。</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/L82W6TN5kru67UrAi7kvqZaBPXZsOVxlIPzQzLhAhV8rx1552018551153.jpg&thumbnail=650x2147483647&quality=80&type=jpg" alt="img"></p><p>3）发送轮询消息元件是一个AMQPPublisher采样器。主要属性配置如下图。</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/YltvlvAeX56Iz1L6ZCDJv9yAhYvW7u5zOdjMYgywgqc001552018551153.jpg&thumbnail=650x2147483647&quality=80&type=jpg" alt="img"></p><p>4）获取返回消息元件是一个AMQPConsumer采样器。主要属性配置如下图。</p><p><img src="https://nimg.ws.126.net/?url=http://dingyue.ws.126.net/DL57JMKOUIvDLIBP0uRVJkkmZB6pS8KHsCJdiqsx6HsWy1552018551153.jpg&thumbnail=650x2147483647&quality=80&type=jpg" alt="img"></p><p>5）Aggregate Report为最终的聚合报告。以一次50线程并发为例，测试结果如下。</p><p>由于JMeter所在客户端能力有限，仅做脚本正确性验证，不能作为业务模块性能的最终结果（可以说明该查询操作每秒的TPS最少为210）。</p><h5 id="7-总结"><a href="#7-总结" class="headerlink" title="7 总结"></a>7 总结</h5><p>JMeter安装容易，使用简单，通过扩展插件能够增加非常丰富的功能，适应各种协议的测试。本文主要介绍了RabbitMQ采样器AMQP Publisher和AMQp Consumer的相关知识。从插件的编译，界面，到实际测试用例中的使用，都给出了详细的介绍。同时，由于插件由源码编译得来，可以根据需要进行定制化，提供更为贴心的服务。  </p><p>转载原文：<a href="https://www.163.com/dy/article/E9OCNL9105317EFI.html">https://www.163.com/dy/article/E9OCNL9105317EFI.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> jmeter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo deploy操作时出现token、username、password输入</title>
      <link href="/posts/1655302351.html"/>
      <url>/posts/1655302351.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h4><pre><code>fatal: 已取消一个任务。error: unable to read askpass response from &#39;D:/development/Git/mingw64/libexec/git-core/git-gui--askpass&#39;Username for &#39;https://github.com&#39;: 1137528916@qq.comerror: unable to read askpass response from &#39;D:/development/Git/mingw64/libexec/git-core/git-gui--askpass&#39;Password for &#39;https://1137528916@qq.com@github.com&#39;:3.14xmywanfatal: unable to access &#39;https://github.com/alacong/alacong.github.io.git/&#39;: OpenSSL SSL_read: Connection was reset, errno 10054FATAL &#123;  err: Error: Spawn failed      at ChildProcess.&lt;anonymous&gt; (D:\myblog\node_modules\hexo-util\lib\spawn.js:51:21)      at ChildProcess.emit (events.js:400:28)      at ChildProcess.cp.emit (D:\myblog\node_modules\cross-spawn\lib\enoent.js:34:29)      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;    code: 128  &#125;&#125; Something&#39;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</code></pre><h4 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h4><p>GitHub中的token被删除了</p><h4 id="修复："><a href="#修复：" class="headerlink" title="修复："></a>修复：</h4><p>一、github中产生Token</p><p>1、登陆github</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210924163740687.png" alt="image-20210924163740687"></p><p>2、进入Settings，往下翻</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210924163954749.png" alt="image-20210924163954749"></p><p>3、进入 Developer Settings</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210924164118412.png" alt="image-20210924164118412"></p><p>4、进入 Personal access tokens</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210924164205878.png" alt="image-20210924164205878"></p><p>5、点击 Generate new token，创建token</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210924164624343.png" alt="image-20210924164624343"></p><p>输入 Note：“Token目的的名称”，Expiration：“Token有效期，可选永久”， <strong>Select scopes：“权限全选”</strong></p><p>6、点击 Generate token，产生token,复制下来。</p><p>二、输入username，是输入邮箱如我的：<a href="mailto:&#49;&#49;&#x33;&#55;&#53;&#50;&#56;&#x39;&#x31;&#x36;&#64;&#x71;&#113;&#x2e;&#99;&#x6f;&#x6d;">&#49;&#49;&#x33;&#55;&#53;&#50;&#56;&#x39;&#x31;&#x36;&#64;&#x71;&#113;&#x2e;&#99;&#x6f;&#x6d;</a></p><p>三、输入password，是输入登录github的密码：XXXXXXXXXXXXX</p><p>四、最后成功上传</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210924165040995.png" alt="image-20210924165040995"></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集成测试方法示例</title>
      <link href="/posts/39571709.html"/>
      <url>/posts/39571709.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>集成测试方式分为自顶向下和自底向上两种。</p><p>自顶向下集成(Top-Down Integration)：</p><p>从主控模块开始，沿着程序控制层次向下移动，逐渐把各模块组合起来。</p><p>可以使用深度优先或是广度优先的组合策略。</p><p>自顶向下的集成步骤：</p><p>1、对主控模块进行测试，用桩模块替代被主控模块调用的子模块</p><p>2、根据选定的策略（深度/广度），每次用一个实际模块代换一个桩模块</p><p>3、进行集成测试</p><p>4、为了保证加入的模块没有引进新的错误，根据需要进行回归测试。2-4循环。</p><p>示例：<br><img src="https://images0.cnblogs.com/blog2015/729780/201505/031538152084307.jpg"><br>实现一下模块的自顶向下深度优先测试。</p><p>测试方式：</p><p>自低向上集成（Bottom-Up Integration）</p><p>自底向上测试从软件结构最底层的模块开始组装和测试。</p><p>因为是从底部向上结合模块，总能得到所需的下层模块处理功能，所以不需要桩模块。</p><p>自低向上集成步骤</p><p>1、把底层模块组合成实现某个特定子功能的族</p><p>2、编写测试驱动程序,协调测试数据的输入输出</p><p>3、对该子功能族进行测试</p><p>4、去掉测试驱动程序，自底向上移动，把子功能组合成更大的子功能族。2-4循环</p><p>对以上模块进行自底向上集成测试。</p><p>其方式为：</p><p>还有一种集合上面两种测试的三明治测试，我们在这里就不在详细介绍了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 测试基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集成测试与功能测试</title>
      <link href="/posts/92960785.html"/>
      <url>/posts/92960785.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#####最近在阅读一些测试理论知识,提及测试阶段基本上分为以下4个：<br>单元测试<br>集成测试<br>系统测试<br>验收测试   </p><p>因为测试基本上是针对一个项目而言，在一个项目内部存在多个软件模块，集成测试指的是对各个单独的软件模块进行测试，这时候需要模拟与待测的软件模块的所有接口，来进行集成测试；<br>而系统测试，在上述各软件模块完成集成测试后，按照项目设计，只需要完成整个系统外部各接口的模拟，进行系统测试    </p><p>不知道上述这样的理解是否有正确，倘若一个项目内仅有一个软件模块的，按照上述理论，那么集成测试和系统测试的差异又在哪里呢？</p><p>######此外还有个困惑：    </p><table><thead><tr><th>测试阶段</th><th>主要测试内容</th></tr></thead><tbody><tr><td>集成测试</td><td>接口测试、路径测试 功能测试、性能测试</td></tr><tr><td>系统测试</td><td>功能测试、健壮性测试、性能测试、用户界面测试、安全性测试、压力测试、可靠性测试、安装/反安装测试</td></tr></tbody></table><h5 id="在集成测试，难道没有功能测试，用户界面测试？"><a href="#在集成测试，难道没有功能测试，用户界面测试？" class="headerlink" title="在集成测试，难道没有功能测试，用户界面测试？"></a>在集成测试，难道没有功能测试，用户界面测试？</h5><p>在集成测试这个阶段，随着集成次数的增加，“集成体”的规模越来越大，离目标系统越来越近，此时要以黑盒测试为主。可以提前做系统测试阶段的部分工作，例如子系统的功能测试、性能测试等等。在这里，感觉集成测试和系统测试越来越接近，甚至有点重叠的感觉。     </p><p>在系统测试阶段，难道就没有接口测试了吗？因为作为系统的话，例如对于通讯类软件的话，肯定与外界其他软件实体存在接口通信;     </p><p>上述一些困惑，希望测试的XDJM给予解答帮助，谢谢</p><p>我说一下我的理解：</p><p>在集成测试，难道没有功能测试，用户界面测试？<br>在集成测试阶段功能测试是有的，但是是被测的小模块的功能点的测试；用户界面测试不应在集成测试阶段做</p><p>集成测试和系统测试的差异又在哪里呢？<br>系统测试关注的是整个系统的数据逻辑、界面等，此时软件产品应该已经每日构建能够冒烟<br>集成测试主要关注的是：<br>全局变量是否被异常修改、几个子模块间的合成是否能达到预期的效果、接口之间的数据传递是否准确无误或引起异常崩溃……</p><p>在系统测试阶段，难道就没有接口测试了吗？<br>系统测试阶段的接口要测，但是通常是图形用户接口（GUI）等，你说的“通讯类软件”的通讯接口这个是属于功能测试<br>集成测试的接口是指函数之间数据传递的接口<br>集成测试和系统测试方面</p><p>1.集成测试与系统测试<br>集成测试是将已经分别通过测试的单元按设计要求组合起来再进行测试，以检查这些单元接口是否存在问题。<br>系统测试一般由若干个不同测试组成，目的是充分运行系统，验证系统各部件能否正常工作并完成所赋予的任务。</p><p>2.集成测试前的准备<br>人员安排（有经验的测试人员和开发者）<br>测试计划（在系统设计阶段开始制定）<br>测试内容<br>3.集成模式<br>测试方法（非渐增式测试模式、渐增式测试模式）<br>4.集成测试的模式<br>非渐增式测试模式，如大棒式；<br>渐增式测试模式；</p><p>5.两种模式的优缺点：<br>工作量（渐增式工作量较大，编码多）<br>错误诊断（渐增式发现错误早，好诊断）<br>渐增式测试更彻底<br>渐增式需要较多的机器时间<br>使用非渐增式可进行并行测试</p><p>6.集成方法<br>自顶向下<br>自底向上<br>混和模式<br>大棒和三明治<br>两种辅助模块<br>驱动模块<br>桩模块</p><p>7.自顶向下和自底向上集成方法<br>自顶向下法<br>从主控模块开始，沿着软件的控制层次向下移动，逐渐把各个模块结合起来。<br>优缺点<br>不需要测试驱动<br>能早期发现上层模块的接口错误<br>需要桩模块<br>底层模块中错误发现较晚<br>早期不能重分发挥人力。<br>自底向上法<br>自底部向上测试从“原子”模块开始集成以进行测试<br>混合策略<br>对软件结构中较上曾使用“自顶向下”法，对软件结构中较下层使用“自底向上”法<br>8.大棒与三明治集成方法<br>大棒集成方法<br>先对每个子模块进行测试，然后将所有模块全部集成起来一次性进行集成测试。<br>三明治集成方法</p><p>9.集成测试中的功能测试区分于单元测试中的功能测试；单元测试中功能测试目的是保证所测试的每个独立模块在功能上市正确的，主要从输入条件和输出结果进行判断。<br>集成测试前后的功能测试，不仅考虑模块之间的相互作用，而且考虑系统应用环境，其衡量标准是实现产品规格说明书上所要求的内容。</p><p>10.功能测试的目的和方法<br>功能测试的目标是满足用户功能的需求。<br>功能测试多采用黑盒测试的方法，有时也可辅助使用白盒测试。<br>功能测试的方法<br>等价类划分法<br>边界值分析法<br>错误推测法<br>因果图法<br>组合分析法<br>组合分析法是一种基于每对参数组合的测试技术，考虑参数之间的影响是主要的错误来源，大多数的错误起源于简单的参数组合。<br>组合分析法优点是：实现的成本底，维护成本底，易于自动化。</p><p>11.系统测试<br>系统测试是在集成测试之后，与计算机硬件、和某些支持软件、数据和人员等系统元素结合起来，在实际运行环境下对计算机系统进行严格的测试，来发现软件的潜在问题，保证系统的运行。<br>系统测试区别于功能测试。<br>功能测试主要是验证软件功能的实现情况，不考虑各种环境以及非功能问题。</p><p>12.系统测试的内容<br>压力测试<br>也称强度测试、负载测试。压力测试时模拟实际应用的软件环境及用户使用过程的负荷，长时间或超大负荷地运行测试软件，来测试被测系统的性能、可靠性、稳定性等。<br>容量测试<br>预先分析出反映软件系统应用特长的某项指标的极限量。<br>性能测试<br>通过测试确定系统运行时的性能表现，如得到运行速度、响应时间、占有系统资源等方面的系统数据。<br>安全测试<br>检查系统对非法侵入的防范能力。安全测试期间人员假扮非法入侵者，采用各种办法试图突破防线。<br>容错测试<br>主要检查系统的容错能力。当系统出错时，能否在指定时间间隔内修正错误并重新启动系统。</p><p>12.1压力测试<br>压力测试——系统非正常承载能力的测试；<br>压力估算——可选实际峰值的1.5-2倍；<br>测试环境的准备；<br>问题分析；<br>累积效应；</p><p>12.2容量测试<br>容量测试——对预先期望系统特性极限指标测试。系统在极限值状态下能保持主要功能正常。<br>容量测试完成的标准是：所计划的测试已经全部执行，而且达到或超出指定的系统限制是没有出现故障。</p><p>12.3性能测试<br>性能测试——真实系统中真实可靠地测试系统的性能。</p><p>12.4三种测试的比较<br>压力测试重点在于发现系统功能性不易发现的错误；<br>容量测试着重于系统是否达到预计的目标；<br>性能测试着重于在苛刻环境中衡量资源的使用，诊断系统效率低和系统故障的原因。<br>12.5安全性测试<br>两种级别的安全性：<br>应用程序级别的安全性；<br>系统级别的安全性；<br>测试目标<br>测试范围<br>完成标准</p><p>12.6可靠性测试<br>可靠性是产品在规定的条件下和规定的时间内完成规定功能的能力<br>可靠性测试的三要素：<br>规定时间<br>规定的环境条件<br>规定的功能</p><p>12.7容错测试<br>容错测试是检查软件在异常条件下自身是否具有防护性的措施或某种灾难恢复的手段和能力。<br>在规定的时间内能否修正错误并更新或启动系统。</p><p>13.回归测试<br>回归测试的目的——新做的修改不影响原有的功能需求。<br>所做的修改达到了预定的目的，错误得到改正，新功能得以实现，能适应新环境；<br>不影响软件原有的功能；<br>回归测试的方法<br>全部测试用例法；<br>基于风险选择测试；<br>基于操作剖面测试；<br>局部测试；</p><p>一、测试种类</p><p>功能测试：针对产品需求说明书的测试，主要是验证功能是否符合需求，包括原定功能的检测、是否有冗余功能、遗漏功能。这类测试应该有测试人员完成，这并不意味着程序员在发布前不检查他们的代码能否工作。</p><p>健壮性测试（容错能力/恢复能力测试）：侧重于程序容错能力测试。本测试在单元测试阶段和系统测试阶段都要进行。如数据边界测试、非法数据测试、异常中断测试等等，主要是验证程序对各种异常情况是否进行正确的处理。为了执行方便，建议健壮性的大部分测试用例尽量编写在功能测试用例中。</p><p>接口测试：程序员对各个模块进行系统联调的测试，包含程序内接口和程序外接口测试。这个测试，在单元测试阶段进行了一部分工作，而大部分都是在集成测试阶段完成的。由开发人员进行。</p><p>强度测试：检查程序对异常情况的抵抗能力。强度测试总是迫使系统在异常的资源配置下运行。例如，1 当中断的正常频率为每秒一至两个时，运行每秒产生十个中断的测试用例；2定量地测试数据输入率，检查输入子功能的反映能力；3 运行需要最大存储空间的测试用例；4 运行可能导致虚存操作系统崩溃或磁盘数据剧烈抖动的测试用例。</p><p>压力测试：对系统不断施加压力的测试，是通过确定一个系统的瓶颈或者不能接收的性能点，来获得系统能提供的最大服务级别的测试。例如测试一个Web站点在大量的负荷下，何时系统的响应会退化或失败。</p><p>性能测试：在交替进行负荷和强迫测试时常用的术语。性能测试关注的是系统的整体。它和通常说的强度、压力/负荷测试有密切关系。所以压力和强度应该与性能测试一同进行。举例说明，针对一个网站进行测试，模拟10到50个用户就是在进行常规性能测试，用户增加到1000乃至上万就变成了压力/负载测试。如果同时对系统进行大量的数据查询操作，就包含了强度测试。压力测试注重的是外界不断施压，强度测试注重的是极限或者异常情况下系统的测试。</p><p>用户界面测试：对系统的界面进行测试，测试用户界面是否友好、是否方便易用、设计是否合理、位置是否正确等一系列界面问题。</p><p>安全测试：主要是测试系统在没有授权的内部或者外部用户对系统进行攻击或者恶意破坏时如何进行处理，是否仍能保证数据的安全。测试人员可以学习一些黑客技术，来对系统攻击。</p><p>可靠性测试：这里是比较狭义的可靠性测试，它主要是对系统能否稳定运行进行一个统计，在实际工作中如果没有条件可以不必特意去做。重点做好与之相关的功能测试、健壮性测试就可以了。</p><p>安装/反安装测试：安装测试主要检验软件是否可以正确安装，安装文件的各项设置是否有效，安装后能否影响原系统；反安装是逆过程，测试是否删除干净，是否影响原系统等。</p><p>文档测试：主要测试开发过程中针对用户的文档，以需求、用户手册、安装手册等为主。检验文档是否和实际应用存在差别。文档测试不需要编写测试用例。</p><p>二、测试阶段</p><p>单元测试：单元测试是针对软件设计的最小单位——程序模块进行正确性检验的测试工作，由开发人员进行，其目的在于发现每个程序模块内部可能存在的缺陷，实际程序员编码过程中已经进行了。单元测试基本不需要编写测试用例，开发人员自己调试通过、符合设计要求就可以了。</p><p>集成测试：集成测试是将模块按照设计要求组装起来进行测试，主要目标是发现与接口有关的问题，由于在产品提交到测试部门前，产品开发小组都要进行联合调试，所以大部分企业是由开发人员来完成集成测试的，但也可以到了测试部门后再次进行集成测试。主要测试模块之间数据传输是否正确、模块集成后的功能是否实现、模块接口功能与设计需求是否一致。集成测试紧接在单元测试之后，当单元测试通过后，便可开始配置集成测试环境。集成测试是最关键的一步，如果问题较多就把产品送到测试部，会造成反复测试，从而浪费人力、物力资源，延误了工期。</p><p>系统测试：系统测试是在集成测试通过后进行，目的是充分运行系统，验证各子系统是否都能正常工作并完成设计的要求。主要由测试部门进行，是测试部门最大最重要的一个测试，对产品的质量有重大的影响。系统测试的主要内容有：功能测试、健壮性测试、性能－效率测试、用户界面测试、安全性测试、压力测试、可靠性测试、安装/反安装测试等。这个测试需要编写大量的测试用例，投入大量的资源来完成。</p><p>验收测试：根据需求阶段的《需求规格说明书》为验收标准，测试时要求模拟实际运行环境。对于实际项目可以和客户共同进行，对于产品实际就是最后一次的系统测试。测试内容</p>]]></content>
      
      
      
        <tags>
            
            <tag> 测试基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(len = is.read(buffer)) != -1</title>
      <link href="/posts/2814047462.html"/>
      <url>/posts/2814047462.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="len-is-read-buffer-1的原理详解-InputStream-read-buffer-方法"><a href="#len-is-read-buffer-1的原理详解-InputStream-read-buffer-方法" class="headerlink" title="(len = is.read(buffer)) != -1的原理详解 InputStream.read(buffer) 方法"></a>(len = is.read(buffer)) != -1的原理详解 InputStream.read(buffer) 方法</h1><h4 id="1、在java中api文档有read（）这几种方法"><a href="#1、在java中api文档有read（）这几种方法" class="headerlink" title="1、在java中api文档有read（）这几种方法"></a>1、在java中api文档有read（）这几种方法</h4><table><thead><tr><th>方法摘要</th><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>abstract int</td><td>read()</td><td>从输入流中读取数据的下一个字节</td></tr><tr><td>int</td><td>read(byte[] b)</td><td>将输入流中读取一定数量 并将其存储在缓冲区数组 b 中。</td></tr><tr><td>int</td><td>read(byte[] b, int off, int len)</td><td>将输入流中最多 len 个数据字节读入 byte 数组。</td></tr></tbody></table><h4 id="2、read-1的含义"><a href="#2、read-1的含义" class="headerlink" title="2、read()==-1的含义"></a>2、read()==-1的含义</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Reads the next byte of data from the input stream. The value byte is * returned as an &lt;code>int&lt;/code> in the range &lt;code>0&lt;/code> to * &lt;code>255&lt;/code>. If no byte is available because the end of the stream * has been reached, the value &lt;code>-1&lt;/code> is returned. This method * blocks until input data is available, the end of the stream is detected, * or an exception is thrown.     * * &lt;p> A subclass must provide an implementation of this method.    * * @return     the next byte of data, or &lt;code>-1&lt;/code> if the end of the * stream is reached.     * @exception  IOException  if an I/O error occurs. */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是read()方法中的注释，意思就是read()从输入流中读取下一个字节。如果没有字节可读（也就是read()读到文件最后了）read()返回-1。</p><h4 id="3、从源码解释"><a href="#3、从源码解释" class="headerlink" title="3、从源码解释"></a>3、从源码解释</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                     <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                     <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>off <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> len <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> len <span class="token operator">></span> b<span class="token punctuation">.</span>length <span class="token operator">-</span> off<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                         <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                                  <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                     b<span class="token punctuation">[</span>off<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>c<span class="token punctuation">;</span>                                  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                     <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                             c <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                 <span class="token keyword">break</span><span class="token punctuation">;</span>                             <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                             b<span class="token punctuation">[</span>off <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>c<span class="token punctuation">;</span>                         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ee<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                     <span class="token keyword">return</span> i<span class="token punctuation">;</span>                 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>流程：</p><ol><li><p>如何判断文件读取完成？<br>若我们下载一个文件，要在读取中不断的获取read()的返回值，判断何时-1，来表示读取完成。</p></li><li><p>为何不使用read()，而是用read(buffer)?<br>原因是：read(buffer)效率更高，如果文件有10000byte，使用read()要读10000次然后不停的往存储上写入，而使用read(buffer) 可以读取最大buffer长度的数据(如：buffer长度1000)，只需11次（为何11次而不是10，请接着看），然后写入存储中。</p></li><li><p>read(buffer)如何读入？<br>如10000byte的文件下载，我们buffer长度1000，read(buffer)其实可以看做，是将文件分成【（10000除以1000 向上取整）+1 份】11份，其中最后一块其实就是个空的，用来判断文件读取完成。    </p></li></ol><p>根据上面的源码，我们知道其实是read(buffer) 里面调用 read(byte b[], int off, int len), 在 read(byte b[], int off, int len) 中，读取文件</p><ul><li>首先<br>在每个段中，使用<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                       <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>判断第一个字节是否是-1. c==-1,说明当前是上面的1所指的第11块。    </p><ul><li>其次<br>如果c!=-1,说明文件未读取完成(也就是1-10块),for循环<br>```java<br>for (; i &lt; len ; i++) {<pre><code>                       c = read();                       if (c == -1) &#123;                           break;                       &#125;                       b[off + i] = (byte)c;</code></pre></li></ul><p>```<br>总结：不断地读取字节，如果在读取期间c==-1.说明文件读取完成（也就是第10块，第10块写入的byte长度，不一定都填充满buffer的长度1000），此时，break，跳出循环。进行下一个read(buffer) ，此时满足上面的if,返回-1。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于&#39;$&#39;{pageContext.request.contextPath}的理解</title>
      <link href="/posts/966109248.html"/>
      <url>/posts/966109248.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1、pageContext页面上下文对象"><a href="#1、pageContext页面上下文对象" class="headerlink" title="1、pageContext页面上下文对象"></a>1、pageContext页面上下文对象</h1><ul><li><p>${pageContext.request.contextPath}是JSP取得绝对路径的方法，等价于&lt;%=request.getContextPath()%&gt; 。也就是取出部署的应用程序名或者是当前的项目名称    </p></li><li><p>比如我的项目名称是demo1在浏览器中输入为<br><a href="http://localhost:8080/demo1/a.jsp">http://localhost:8080/demo1/a.jsp</a>     </p><pre class="line-numbers language-java"><code class="language-java">$<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>pageContext<span class="token punctuation">.</span>request<span class="token punctuation">.</span>contextPath<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>或<span class="token operator">&lt;</span><span class="token operator">%=</span>request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token operator">></span>取出来的就是<span class="token operator">/</span>demo1<span class="token punctuation">,</span>而<span class="token string">"/"</span>代表的含义就是http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>故有时候项目中这样写              ${pageContext.request.contextPath}/a.jsp</p></li></ul><h1 id="2、绝对路径与相对路径的比较"><a href="#2、绝对路径与相对路径的比较" class="headerlink" title="2、绝对路径与相对路径的比较"></a>2、绝对路径与相对路径的比较</h1><p>１. 采用相对路径遇到的问题<br>相对路径固然比较灵活，但如果想复制页面内的代码却变得比较困难，因为不同的页面具有不同的相对路径，复制后必须修改每一个连接的路径。<br>如果页面被多于一个的页面所包含，那么被包含页面中的相对路径将是不正确的。<br>如果采用Struts的Action返回页面，那么由于页面路径与 Action路径不同，使得浏览器无法正确解释页面中的路径，如页面为/pages/cust/cust.jsp，图片所有目录为/images /title.gif，这时在/pages/cust/cust.jsp中的所用的路径为”<a href="http://images.cnblogs.com/">http://images.cnblogs.com</a> /title.gif”，但是如果某一个Action的Forward指向这个JSP文件，而这个Action的路径为/cust/manage.do， 那么页面内容中”<a href="http://images.cnblogs.com/title.gif%E2%80%9D%E5%B0%B1%E4%B8%8D%E5%86%8D%E6%8C%87%E5%90%91%E6%AD%A3%E7%A1%AE%E7%9A%84%E8%B7%AF%E5%BE%84%E4%BA%86%E3%80%82">http://images.cnblogs.com/title.gif”就不再指向正确的路径了。</a><br>解决以上问题似乎只有使用绝对路径了。<br>２）采用绝对路径遇到的问题<br> 随 着不同的Web应用发布方式，绝对路径的值也不同。如Web应用发布为MyApp，则路径”/MyApp/images/title.gif”是正确的， 但发布为另一应用时如MyApp2，这个路径就不对了，也许这个情况比较少，但以default方式发布Web应用时以上绝对路径也不 同：”/images/title.gif”。<br>二．解决方案<br>１）采用绝对路径，但为了解决不同部署方式的差别，在所有非struts标签的路径前加${pageContext.request.contextPath}，如原路径为：<br>”/images/title.gif”，改为<br>“${pageContext.request.contextPath}/images/title.gif”。<br>代码” ${pageContext.request.contextPath}”的作用是取出部署的应用程序名，这样不管如何部署，所用路径都是正确的。</p><p>缺点：<br>操作不便，其他工具无法正确解释${pageContext.request.contextPath}<br>２） 采用相对路径，在每个JSP文件中加入base标签，如： </p><base href="http://${header['host']}${pageContext.request.contextPath}/pages/cust/relation.jsp" /> 这样所有的路径都可以使用相对路径。<p>缺点：<br>对于被包含的文件依然无效。<br>    真正使用时需要灵活应用１）和２），写出更加健壮的代码。 </p><p>在使用的时候可以使 用${pageContext.request.contextPath}，也同时可以使 用&lt;%=request.getContextPath()%&gt;达到同样的效果，同时，也可以 将${pageContext.request.contextPath}，放入一个JSP文件中，将用C：set放入一个变量中，然后在用的时候用EL 表达式取出来。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础--方法重写与重载</title>
      <link href="/posts/1198416085.html"/>
      <url>/posts/1198416085.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="方法重写原则："><a href="#方法重写原则：" class="headerlink" title="方法重写原则："></a>方法重写原则：</h1><ol><li>重写的方法名称、参数列表必须与父类的原方法相同，返回类型可以相同，也可以是原类型的子类型。     </li><li>重写方法访问权限不能低于原方法。     </li><li>重写方法不能抛出比原方法更多的异常。      </li><li>被重写的方法不能是被final修饰的，因为被final修饰的方法不能被重写。    </li><li>被重写的方法不能被private修饰，否则在其子类中只是重新定义了一个方法，并没有对其进行重写。    </li><li>被重写的方法不能是static。如果父类中的方法是静态的，而子类中的方法不是静态的，但是两个方法除了这一点其他都满足重写条件，那么会发发生编译错误；反之亦然。即使父类和子类中的方法都是静态的，也不能实现重写，因为静态方法是在编译的时候把静态方法和类的引用类型进行匹配。     </li><li>重写是发生在运行时，因为编译器在编译期间是不知道选择调用哪个方法的，JVM会在代码运行时决定调用哪个方法。     </li></ol><h1 id="方法重载的原则："><a href="#方法重载的原则：" class="headerlink" title="方法重载的原则："></a>方法重载的原则：</h1><p>1、方法名称必须相同。<br>2、方法的参数必须不同（个数不同，或类型不同、或参数类型排列顺序不同等）。<br>3、方法的返回类型可以相同也可以不同。<br>4、仅仅方法返回值不同不足以实现重载。<br>5、重载时发生在编译时的，因为编译器可以根据参数的类型来选择哪个。    </p><h1 id="重写和重载的不同："><a href="#重写和重载的不同：" class="headerlink" title="重写和重载的不同："></a>重写和重载的不同：</h1><p>1、方法重写要求参数列表必须一致，而方法重载必须不一致。<br>2、方法重写要求返回类型必须一致，方法重载不做要求。<br>3、方法重写只能用于子类重写父类的方法，方法重载应用在同一个类中的所有方法。<br>4、方法重写对方法的范文权限和抛出的异常有特殊要求，而方法重载在这方面没有特殊限制<br>5、父类的一个方法只能被子类重写一次，而一个方法可以在所有的类中可以被重载多次。<br>6、重载是编译时多态，重写是运行时多态。    </p>]]></content>
      
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础--封装、继承</title>
      <link href="/posts/947896497.html"/>
      <url>/posts/947896497.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、封装步骤"><a href="#一、封装步骤" class="headerlink" title="一、封装步骤"></a>一、封装步骤</h1><ol><li>修改属性的可见性（将访问修饰符设计为private（私有化））  <ul><li>当private加在属性前面表示只能在当前类内访问（信息的隐藏）    </li></ul></li><li>创建getter(取值)/setter（赋值）方法（设为public用于属性的读写）    </li><li>在getter/setter方法中加人属性控制语句（对属性值的合法性进行判断）<br>eg：    </li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lac<span class="token punctuation">.</span>duixiang<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//私有属性：书名、作者、出版社、价格</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span>    <span class="token keyword">private</span> String author<span class="token punctuation">;</span>    <span class="token keyword">private</span> String publisher<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过构造方法实现属性赋值</span>    <span class="token keyword">public</span> <span class="token function">Book</span><span class="token punctuation">(</span>String title<span class="token punctuation">,</span>String author<span class="token punctuation">,</span>String publisher<span class="token punctuation">,</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token operator">=</span>title<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只读</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>author<span class="token operator">=</span>author<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只读</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setPublisher</span><span class="token punctuation">(</span>publisher<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*通过公有的get/set方法实现属性的访问，其中：         1、限定图书价格必须大于10，如果无效需进行提示，并强制赋值为10        2、限定作者、书名均为只读属性        */</span>    <span class="token keyword">public</span> String <span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> title<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> author<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> publisher<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPublisher</span><span class="token punctuation">(</span>String publisher<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>publisher <span class="token operator">=</span> publisher<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>price<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"图书价格最低10元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>price<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//信息介绍方法，描述图书所有信息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"书名："</span><span class="token operator">+</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span><span class="token string">"作者："</span><span class="token operator">+</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span><span class="token string">"出版社："</span><span class="token operator">+</span><span class="token function">getPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span><span class="token string">"价格："</span><span class="token operator">+</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类：   </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lac<span class="token punctuation">.</span>duixiang<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//实例化对象，调用相关方法实现运行效果 </span>         Book bk<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">"红楼梦"</span><span class="token punctuation">,</span><span class="token string">"曹雪芹"</span><span class="token punctuation">,</span><span class="token string">"人民文学出版社"</span><span class="token punctuation">,</span><span class="token number">7.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         bk<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Book bk1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">"中国长安出版社"</span><span class="token punctuation">,</span><span class="token string">"小李飞刀"</span><span class="token punctuation">,</span><span class="token string">"古龙"</span><span class="token punctuation">,</span><span class="token number">55.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         bk1<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2、static"><a href="#2、static" class="headerlink" title="2、static"></a>2、static</h1><h2 id="1、基本语法及特征"><a href="#1、基本语法及特征" class="headerlink" title="1、基本语法及特征"></a>1、基本语法及特征</h2><p>定义方法：访问修饰符 static 类型说明符 变量名字；<br>访问方法：可以使用两种方法。    </p><ul><li>对象名.静态属性名；（使用这种方法访问编译器会警告，但不会报错）    </li><li>类名.静态属性名     </li></ul><p>特征：  </p><ol><li>在类中定义后，无论这个类实例化多少个对象，用static修饰的成员属性，都会使用同一片内存空间，改变一个static属性的值，其他都会改变。      </li><li>static属性随着所有实例化的对象销毁后才销毁；普通属性随着他的所属对象一起销毁。     </li><li>静态数据是属于类的，虽然通过对象来引用可以编译通过，但是一般都是通过类名来引用</li></ol><h2 id="2、static使用"><a href="#2、static使用" class="headerlink" title="2、static使用"></a>2、static使用</h2><ol><li>static +属性    </li></ol><ul><li>静态属性、类属性，调用方式：类.静态属性    </li></ul><ol start="2"><li>static +方法    </li></ol><ul><li>静态方法、类方法，调用方式：类.静态方法    </li></ul><ol start="3"><li>static不能用来修饰class（没有静态的类）   </li><li>方法内的局部变量不能添加static修饰符    </li><li>成员方法可以直接访问类中的静态成员；静态方法中不能直接访问非静态成员，只能直接调用静态成员（包括属性和方法），或者通过对象实例化后，以对象.成员的方式进行调用；静态方法中不能使用this。     </li><li>跨包调用类内的公有的静态方法可以使用：包名.类名.方法名的形式。</li></ol><h1 id="3、代码块"><a href="#3、代码块" class="headerlink" title="3、代码块"></a>3、代码块</h1><ul><li>构造代码块：创建对象实例化对象时调用，优先于构造方法执行；多个构造代码块顺序执行；   </li><li>普通代码块：顺序执行；    </li><li>静态代码块：static修饰的代码块，优先于构造代码块执行；顺序执行，无论产生多少个实例，都会只执行一次。  </li></ul><p>eg:    </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建外部类Code构造块（构造块）</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Code的构造块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建外部类Code静态代码块（静态代码块）</span>    <span class="token keyword">static</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Code的静态代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建外部类Code构造方法（构造方法）</span>    <span class="token keyword">public</span> <span class="token function">Code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Code的构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CodeBlock</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建CodeBlock的构造块</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CodeBlock的构造块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建CodeBlock的静态代码块</span>    <span class="token keyword">static</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CodeBlock的静态代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建CodeBlock的构造方法</span>    <span class="token keyword">public</span> <span class="token function">CodeBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CodeBlock的构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//编写代码测试运行优先顺序，运行结果参见效果图</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CodeBlock的主方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"产生Code类的实例对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Code co<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Code co1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"产生CodeBlock类的实例对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         CodeBlock cb<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CodeBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果：实例化对象    </p><pre class="line-numbers language-java"><code class="language-java">CodeBlock的静态代码块CodeBlock的主方法产生Code类的实例对象Code的静态代码块Code的构造块Code的构造方法Code的构造块Code的构造方法产生CodeBlock类的实例对象CodeBlock的构造块CodeBlock的构造方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4、如何实现判断字符串内容"><a href="#4、如何实现判断字符串内容" class="headerlink" title="4、如何实现判断字符串内容"></a>4、如何实现判断字符串内容</h1><p>可以通过equals()方法进行字符串内容的判断，如果内容相等返回值为true，反之为false。如下：<br>当str代表用户性别时，可以通过如下代码，判别性别为“男”还是“女”。    </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"性别为男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"性别为女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5、访问修饰符"><a href="#5、访问修饰符" class="headerlink" title="5、访问修饰符"></a>5、访问修饰符</h1><table><thead><tr><th align="center">访问修饰符</th><th align="center">本类</th><th align="center">同包</th><th align="center">子类</th><th align="center">其他</th></tr></thead><tbody><tr><td align="center">private</td><td align="center">行</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">默认</td><td align="center">行</td><td align="center">行</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">protected</td><td align="center">行</td><td align="center">行</td><td align="center">行</td><td align="center"></td></tr><tr><td align="center">public</td><td align="center">行</td><td align="center">行</td><td align="center">行</td><td align="center">行</td></tr><tr><td align="center">从上往下访问访问越来越大。</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h1 id="6、继承"><a href="#6、继承" class="headerlink" title="6、继承"></a>6、继承</h1><h2 id="6-1、方法重载与重写"><a href="#6-1、方法重载与重写" class="headerlink" title="6.1、方法重载与重写"></a>6.1、方法重载与重写</h2><blockquote><p>方法重载：</p><ol><li>在同一个类中    </li><li>方法名相同，参数列表不相同（参数顺序、个数、类型）    </li><li>方法返回值，访问修饰符任意   </li><li>与方法的参数名无关   </li></ol></blockquote><blockquote><p>方法重写：</p></blockquote><ol><li>有继承关系的子类中</li><li>方法名相同，参数列表相同（参数顺序、个数、类型），方法返回值相同    </li><li>访问修饰符，访问范围需要大于等于父类的访问范围</li><li>与方法的参数名无关    </li></ol><h2 id="6-2、重写与super的使用"><a href="#6-2、重写与super的使用" class="headerlink" title="6.2、重写与super的使用"></a>6.2、重写与super的使用</h2><ol><li><p>子类内如果没有重写方法，可以直接调用父类方法；    </p></li><li><p>子类内如果有父类重写方法，想调用父类的必须要用super.； </p></li><li><p>子类继承了父类的属性和方法，super可以引用父类一切公开属性和成员方法；     </p></li><li><p>父类的构造方法不允许被继承和重写的；     </p></li></ol><h2 id="6-3、继承后的初始化构造步骤"><a href="#6-3、继承后的初始化构造步骤" class="headerlink" title="6.3、继承后的初始化构造步骤"></a>6.3、继承后的初始化构造步骤</h2><p>eg：父类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lac<span class="token punctuation">.</span>animal<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 父类 * @author 罗阿聪 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token operator">=</span><span class="token string">"啦啦"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//昵称</span>    <span class="token keyword">private</span> String month<span class="token operator">=</span><span class="token string">"3"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//月份</span>    <span class="token keyword">private</span> String species<span class="token operator">=</span><span class="token string">"都是"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//品种</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token number">33</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> st1<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> st2<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是父类的静态代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是父类的构造代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//无参构造  *父类的构造不允许被继承、不允许被重写//?</span>    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是父类的无参构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lac<span class="token punctuation">.</span>animal<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> weight<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//体重</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> st3<span class="token operator">=</span><span class="token number">33</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是子类的静态代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是子类的构造代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//无参构造</span>    <span class="token keyword">public</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"w我是子类的无参构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lac<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lac<span class="token punctuation">.</span>animal<span class="token punctuation">.</span>Cat<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestTwo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        Cat one<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-java"><code class="language-java">我是父类的静态代码块我是子类的静态代码块我是父类的构造代码块我是父类的无参构造方法我是子类的构造代码块w我是子类的无参构造方法<span class="token number">33</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于测试类中的语句 Cat one =new Cat();他的类的加载过程是先于实例化过程的。<br>类Cat的继承关系：Cat–&gt;Aniaml–&gt;Object(所有类的父类)    </p><blockquote><ol><li>执行该程序时，ClassLoader.class会将相关的类进行加载到jvm中。</li><li>在生明Cat one 时会进行类的加载过程，jvm虚拟首先会基于父类回溯的方式一直回溯到Object类（所有类都继承于它），然后加载Object类，对于Object类中的静态成员（包括静态代码块、静态变量、静态方法）依据顺序进行加载；接着加载Animal类，依据顺序进行加载其中的静态成员</li><li>之后进行new Cat()的实例化过程，依然首先回溯到Object类，依据顺序执行Object类中的各个构造代码块（如果它有多个构造代码块的话），再执行Object类的构造方法（默认是执行它的无参构造方法，因为在它的子类Animal类的构造方法中的第一行会默认调用它的无参构造方法，除非我们在它的子类Animal类的构造方法中的第一行显式调用了它的带参构造方法，当然实际上它并无带参构造方法）；然后执行Animal类的构造代码块与构造方法；最后执行Cat类的构造代码块与构造方法（此处执行的Cat类构造方法有无参数要看具体的Cat类实例化语句）。     </li></ol></blockquote><p>以上就是类加载过程与类实例化过程的内部运行细节了。另外提一下，访问修饰符对代码的加载顺序是没有影响的。<br>总结：</p><ol><li>子类构造默认调用父类无参构造；</li><li>父类的构造不允许被继承也不能被重写</li><li>子类的构造的过程中必须调用其父类的构造的方法</li><li>如果子类的构造方法中没有显式标注，则系统默认调用父类无参的构造方法</li><li>如果子类构造方法中既没有显式标注，且父类中没有无参的构造方法，则编译出错。</li><li>使用super调用父类指定构造方法，必须在子类的构造方法的第一行</li></ol><h2 id="6-4、super"><a href="#6-4、super" class="headerlink" title="6.4、super"></a>6.4、super</h2><h3 id="6-4-1-super基本使用"><a href="#6-4-1-super基本使用" class="headerlink" title="6.4.1 super基本使用"></a>6.4.1 super基本使用</h3><ol><li>代表父类引用（super是指当前父类的对象）</li></ol><p>-访问父类成员方法：super.print();<br>-访问父类属性：super.name;<br>-访问父类构造方法:super()；<br>2. 可以通过super（）调用父类允许被访问的其他构造方法<br>3. super（） 必须被放在子类构造方法中的有效代码第一行</p><h3 id="6-4-2-super与this的特点"><a href="#6-4-2-super与this的特点" class="headerlink" title="6.4.2 super与this的特点"></a>6.4.2 super与this的特点</h3><p>this：当前类对象的引用    </p><blockquote><ol><li>访问当前类成员的方法</li><li>访问当前类成员属性</li><li>访问当前类的构造方法</li><li>不能在静态方法中使用   </li></ol></blockquote><p>super：父类对象的引用     </p><blockquote><ol><li>访问父亲的成员方法</li><li>访问父亲的成员属性</li><li>访问父亲的构造方法</li><li>不能在静态方法中使用</li></ol></blockquote><h2 id="6-5、Object类"><a href="#6-5、Object类" class="headerlink" title="6.5、Object类"></a>6.5、Object类</h2><p>Object类是类层次结构的根，每个类都由Object作为父类，所有对象，包括数组，都可以调用这个类的所有允许被调用的方法。 </p><h3 id="6-5-1、equals方法"><a href="#6-5-1、equals方法" class="headerlink" title="6.5.1、equals方法"></a>6.5.1、equals方法</h3><ol><li>继承Object中的equals方法时，比较的是两个引用是否指向同一个对象（比较对象的引用不是指向同一空间）。     </li></ol><p>eg：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token operator">=</span><span class="token string">"啦啦"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//昵称</span>    <span class="token keyword">private</span> String month<span class="token operator">=</span><span class="token string">"3"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//月份</span>        其他代码    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是父类的无参构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//带参构造</span>    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>String month<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setMonth</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是父类的带参构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        封装代码    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类主要代码：</p><pre class="line-numbers language-java"><code class="language-java">Animal one <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"花花"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animal two <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"花花"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * equals:         * 1、继承Object中的equals方法时，比较的是两个引用是否指向同一个对象         * 2、如想要比较两个对象的内容是否相等  则需要在父类Animal中重写eauals         */</span>        <span class="token keyword">boolean</span> flag<span class="token operator">=</span> one<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>two<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"one 和 two的引用比较："</span><span class="token operator">+</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"one 和 two的引用比较："</span><span class="token operator">+</span><span class="token punctuation">(</span>one<span class="token operator">==</span>two<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        flag<span class="token operator">=</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str1 和 str2的引用比较："</span><span class="token operator">+</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str1 和 str2的引用比较："</span><span class="token operator">+</span><span class="token punctuation">(</span>str1<span class="token operator">==</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：    </p><pre class="line-numbers language-java"><code class="language-java">one 和 two的引用比较：<span class="token boolean">false</span>one 和 two的引用比较：<span class="token boolean">false</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>str1 和 str2的引用比较：<span class="token boolean">true</span><span class="token comment" spellcheck="true">//这个true是因为字符串比较的是内容是否相同   还没学</span>str1 和 str2的引用比较：<span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>如想要比较两个对象的内容是否相等  则需要在父类Animal中重写eauals。     </li></ol><p>重写equals方法代码：    </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 对Object类中的equals方法进行重写     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这一步是否为空判断很重要  否则会产生空指针异常</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Animal temp<span class="token operator">=</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span> obj<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进行将传入的obj对象强制转换成Aniaml类型</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了避免类型转换的异常  对上面的那个方法进行方法重载：      </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Animal obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这一步是否为空判断很重要  否则会产生空指针异常</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//进行将传入的obj对象强制转换成Aniaml类型</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-5-2、toString方法"><a href="#6-5-2、toString方法" class="headerlink" title="6.5.2、toString方法"></a>6.5.2、toString方法</h3><p>用来返回对象的字符串表示形式。     </p><ol><li>输出对象名时，默认会直接调用类中的toString方法    </li><li>继承Object中的toString方法时，输出对象的字符串形式：类型信息+@+地址信息     </li></ol><p>eg：测试类部分代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**         * toString测试:         * 1、输出对象名时，默认会直接调用类中的toString方法         * 2、继承Object中的toString方法时，输出对象的字符串形式：类型信息+@+地址信息         * 3、子类可以通过重写toString方法的形式，改变输出的内容以及表现形式         */</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>one<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字符串的输出结果时直接输出字符串的内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：   </p><pre class="line-numbers language-java"><code class="language-java">com<span class="token punctuation">.</span>lac<span class="token punctuation">.</span>animal<span class="token punctuation">.</span>Animal<span class="token annotation punctuation">@15db9742</span>com<span class="token punctuation">.</span>lac<span class="token punctuation">.</span>animal<span class="token punctuation">.</span>Animal<span class="token annotation punctuation">@15db9742</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>子类可以通过重写Object中的toString方法的形式，改变输出的内容以及表现形式。<br>父类中重写toString：    </li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span>       <span class="token string">"昵称："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"，月份："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输出结果：    </p><pre class="line-numbers language-java"><code class="language-java">昵称：花花，月份：<span class="token number">2</span>昵称：花花，月份：<span class="token number">2</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-6、final关键字"><a href="#6-6、final关键字" class="headerlink" title="6.6、final关键字"></a>6.6、final关键字</h2><p>final关键字，与访问修饰符(public等)出现的位置无先后之分，可以在前或者在后；      </p><ol><li>修饰类表示不允许被继承；    </li><li>修饰方法表示不允许被子类重写；      </li></ol><ul><li>final修饰的方法可以别继承，可被子类对象调用使用    </li><li>不能修饰构造方法    </li></ul><ol start="3"><li>修饰方法内局部变量，只要使用前赋值即可，一旦赋值不可修改。    </li><li>修饰类中的属性，赋值方式三种：     </li></ol><ul><li>定义直接直接初始化    </li><li>构造方法内赋值     </li><li>构造代码块赋值    </li></ul><ol start="5"><li>Java中分为基本数据类型和引用数据类型两类</li></ol><ul><li>基本数据类型：int float double…可直接进行赋值，赋值后不能更改</li><li>引用数据类型：类 String System 数组…需要通过实例化的方式构造对象，对象里还有很多属性值，引用类型的变量初始化之后不能再指向另一个对象，但是对象的内容是可变的，可以配合static使用来表示全局的不可以被修订的类容可以用来修饰方法和变量</li></ul><p>eg：引用对象，开辟空间     </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> Animal animal <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"翻翻"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每实例化一次就会开辟一次新空间</span><span class="token comment" spellcheck="true">//        animal=new Animal();//在给对象animal开辟一个新空间  因为有final 所以引用对象空间改不了  不能进行引用地址的修订  也就是开不新空间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="7、Java单例模式"><a href="#7、Java单例模式" class="headerlink" title="7、Java单例模式"></a>7、Java单例模式</h1><p>设计模式定义：软件开发人员在开发过程面临问题解决一般问题的解决方案。<br>定义：在一个类中实现有且只有一个实例，并且自行实例化操作项整个系统提供。<br>目的：使得类的一个对象成为该类系统中唯一的实例。    </p><ol><li><p>要点：    </p><blockquote><p>1、某个类只能有一个实例。<br>2、必须自行创建实例。<br>3、必须自行向整个系统提供这个实例。    </p></blockquote></li><li><p>实现：   </p><blockquote><p>1、只提供私有的构造方法；<br>2、含有一个该类静态私有对象；<br>3、提供一个静态共有方法，用于创建、获取静态私有对象。     </p></blockquote></li><li><p>代码实现方案：    </p></li></ol><ul><li>饿汉式：对象创建过程中实例化<br>eg：    </li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1、饿汉式：创建对象实例的时候直接初始化   空间换时间   速度快，占用空间大</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonOne</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//1、创建类中私有构造</span>    <span class="token keyword">private</span> <span class="token function">SingletonOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hhah "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2、创建该类的私有静态实例   饿汉式</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SingletonOne instance<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3、创建共有静态方法返回静态实例对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonOne <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试及输出结果：    </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//两个对象引用一个空间地址  引用相同</span>        SingletonOne one <span class="token operator">=</span> SingletonOne<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SingletonOne two <span class="token operator">=</span> SingletonOne<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>two<span class="token punctuation">)</span><span class="token punctuation">;</span>hhah com<span class="token punctuation">.</span>lac<span class="token punctuation">.</span>model<span class="token punctuation">.</span>SingletonOne<span class="token annotation punctuation">@15db9742</span>com<span class="token punctuation">.</span>lac<span class="token punctuation">.</span>model<span class="token punctuation">.</span>SingletonOne<span class="token annotation punctuation">@15db9742</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>2、懒汉式：静态共有方法中实例化    </li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//2、创建静态的该类实例化对象   没有实例化</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SingletonTwo instance<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3、创建开发的静态方法提供实例对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonTwo <span class="token function">getIntance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance<span class="token operator">==</span>null<span class="token punctuation">)</span>            instance<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SingletonTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试及结果：    </p><pre class="line-numbers language-java"><code class="language-java">SingletonTwo one1 <span class="token operator">=</span>SingletonTwo<span class="token punctuation">.</span><span class="token function">getIntance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SingletonTwo two1 <span class="token operator">=</span>SingletonTwo<span class="token punctuation">.</span><span class="token function">getIntance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>one1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>two1<span class="token punctuation">)</span><span class="token punctuation">;</span>        com<span class="token punctuation">.</span>lac<span class="token punctuation">.</span>model<span class="token punctuation">.</span>SingletonTwo<span class="token annotation punctuation">@6d06d69c</span>com<span class="token punctuation">.</span>lac<span class="token punctuation">.</span>model<span class="token punctuation">.</span>SingletonTwo<span class="token annotation punctuation">@6d06d69c</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、 饿汉式、懒汉式特点    </p><ul><li>饿汉式：在类加载时就创建实例（实例化对象）；以空间换时间，速度快；线程安全；在第一次使用此实例的时候加载速度快，但长时间不使用该对象则造成内存空间的浪费。    </li><li>懒汉式：在第一次使用时才进行实例化；以时间换空间；存在线程风险；在第一次使用此类实例的时候加载速度慢，但不会造成内存空间的浪费。    </li></ul><p>5、单例模式的优缺点：<br>优点 ：</p><blockquote><p>1）在内存中只有一个对象，节省内存空间。<br>2）避免频繁地创建销毁对象，提高性能。<br>3）避免对共享资源的多重占用。   </p></blockquote><p>缺点：</p><blockquote><p>1）扩展比较困难。<br>2）如果实例化后的对象长期不利用，系统将默认为垃圾进行回收，造成对象状态丢失。    </p></blockquote><p>6、使用场景    </p><blockquote><ol><li>创建对象时占用资源过多，但同时又需要用到该类对象。</li><li>对系统内资源要求统一读写。如读写配置信息。</li><li>当多个实例存在可能引起程序逻辑错误，如号码生成器。</li></ol></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础--接口、内部类</title>
      <link href="/posts/2050224293.html"/>
      <url>/posts/2050224293.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1、接口"><a href="#1、接口" class="headerlink" title="1、接口"></a>1、接口</h1><h3 id="1-1、接口的基本定义"><a href="#1-1、接口的基本定义" class="headerlink" title="1.1、接口的基本定义"></a>1.1、接口的基本定义</h3><p>定义：可以用来描述不同的类型具有相似的行为特征，从而通过接口引用指向实例类的方式实现每个类型的自己的行为特征。<br>注：1、接口定义了某一批类所需要遵守的规范，接口不是类，而是对类的一组需求描述。 2、接口不关心这些类的内部数据，也不关心这些类里方法的实现细节，它只规定这些类里必须提供某些方法    </p><h3 id="1-2、接口类"><a href="#1-2、接口类" class="headerlink" title="1.2、接口类"></a>1.2、接口类</h3><ol><li>接口类的方法没有方法体；      </li><li>当一个类实现接口的时候，需要去实现接口中的所有抽象方法，否侧需要将该类设置为抽象类     </li><li>接口中可以包含常量，默认public static final；调用形式为：接口名.常量去访问接口中的常量</li><li>如果是使用接口类创建对象，用含有接口类方法的类（实现类）来实例化对象，那么就只能调用重写接口类方法的那个方法；（特性类似于向上转型）；这样使得了同一个方法可以实现不同的操作。     </li></ol><pre class="line-numbers language-java"><code class="language-java">        IPhoto ip<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FourthTel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用手机拍照也行  手机类也是重写了方法</span>        ip<span class="token punctuation">.</span><span class="token function">photo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用接口中方法，该方法时实现类重写后的方法</span>        ip<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Camera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用相机拍照也行  相机类重写了接口中的photo方法</span>        ip<span class="token punctuation">.</span><span class="token function">photo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用接口中方法，该方法时实现类重写后的方法      </span>        测试输出结果：手机可以拍照相机可以拍照<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：只能用含有接口类方法的类（实现类）来实例化对象，而且接口类本身不能创建对象（特性类似于抽象类）     </p><h3 id="1-3、接口中的默认和静方法"><a href="#1-3、接口中的默认和静方法" class="headerlink" title="1.3、接口中的默认和静方法"></a>1.3、接口中的默认和静方法</h3><ol><li>default ：默认方法，可以带方法体，jdk1.8后新增，可以在实现类中重写，并可以通过接口的引用调用。实现类在重写接口中的默认方法时调用接口默认方法的语句为：<br>&lt;接口名&gt;.super.&lt;默认方法名&gt;   </li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//接口类的默认方法</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是接口中的默认链接方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//实现类中的重写默认方法</span>    <span class="token comment" spellcheck="true">//重写默认方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        INet<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用接口中默认的方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我时接口中重写的默认方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2 . static :静态方法 可以带方法体 jdk1.8后新增不可以在实现类中重写，可以同接口名调用。    </p><h3 id="1-4、多接口使用"><a href="#1-4、多接口使用" class="headerlink" title="1.4、多接口使用"></a>1.4、多接口使用</h3><ol><li>默认方法重名解决方案：在实现类中重写自己的同名方法。     </li><li>实现类还实现了继承某父类，且重写了接口中的默认方法，默认调用父类中重写方法。     </li><li>在一个类内，如果指定是若干个接口，而这若干个接口之间有同名的变量的时候，在此类中调用接口中含有同名的变量的时候也会报错。在上述的例子中，如果该类有继承关系的父类当中也含有与接口同名的变量，则同样会报错。解决此类办法的途径就是在该类中显式的定一个该同名的变量，以消除这种错误。<br>eg：<br><a href="https://s1.ax1x.com/2020/09/02/wp3V29.jpg" title="丧尸"><img src="https://s1.ax1x.com/2020/09/02/wp3V29.jpg" alt="丧尸" title="丧尸"></a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端——servlet的setAttribute()、getAttribute</title>
      <link href="/posts/979668619.html"/>
      <url>/posts/979668619.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、ServletContext域中"><a href="#一、ServletContext域中" class="headerlink" title="一、ServletContext域中"></a>一、ServletContext域中</h1><h2 id="1-1-ServletContext"><a href="#1-1-ServletContext" class="headerlink" title="1.1 ServletContext"></a>1.1 ServletContext</h2><p>ServletContext是Servlet 上下文，是个接口，是 Web 应用中所有 Servlet 在 Web 容器中的运行时环境。这个运行时环境随着 Web 应用的启动而创建，随着 Web 应用的关闭而销毁。也就是说，一个 Web 应用，就一个 Servlet 运行时环境，即一个 Servlet 上下文，即一个ServletContext 对象。    </p><p>这个 Servlet 运行环境中都包含哪些具体的“环境”呢？即 ServletContext 对象中都包含哪些具体的信息呢？不仅包含了 web.xml 文件中的配置信息，还包含了当前应用中所有Servlet 可以共享的数据。可以这么说，ServeltContext 可以代表整个应用。所以，ServletConetxt有另外一个名称：application。(EL表达式就是取这个名字)</p><h2 id="1-2-方法"><a href="#1-2-方法" class="headerlink" title="1.2 方法"></a>1.2 方法</h2><pre class="line-numbers language-java"><code class="language-java">String <span class="token function">getInitParameter</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>：获 取 web<span class="token punctuation">.</span>xml 文 件 的 <span class="token operator">&lt;</span>context<span class="token operator">-</span>param<span class="token operator">/</span><span class="token operator">></span> 中 指 定 名 称 的 上 下 文 参 数 值 。 例 如<span class="token function">getInitParameter</span><span class="token punctuation">(</span>“myDBDriver”<span class="token punctuation">)</span><span class="token punctuation">;</span>会返回字符串“com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver”。Enumeration <span class="token function">getInitParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：获取 web<span class="token punctuation">.</span>xml 文件的<span class="token operator">&lt;</span>context<span class="token operator">-</span>param<span class="token operator">/</span><span class="token operator">></span>中的所有的上下文参数名称。其返回值为枚举类型 Enumeration<span class="token operator">&lt;</span>String<span class="token operator">></span>。 <span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Object object<span class="token punctuation">)</span>：在 ServletContext 的公共数据空间中，也称为域属性空间，放入数据。这些数据对于 Web应用来说，是全局性的，与整个应用的生命周期相同。当然，放入其中的数据是有名称的，通过名称来访问该数据。Object <span class="token function">getAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>：从 ServletContext 的域属性空间中获取指定名称的数据。<span class="token keyword">void</span> <span class="token function">removeAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>：从 ServletContext 的域属性空间中删除指定名称的数据。String <span class="token function">getRealPath</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span>：获取当前 Web 应用中指定文件或目录在本地文件系统中的路径，是基于盘符的路径。String <span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：获取当前应用在 Web 容器中的名称。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、Request-域中"><a href="#二、Request-域中" class="headerlink" title="二、Request 域中"></a>二、Request 域中</h1><h2 id="2-1Request"><a href="#2-1Request" class="headerlink" title="2.1Request"></a>2.1Request</h2><p>在 Request 中也存在域属性空间，用于存放有名称的数据。该数据只在当前 Request 请求中可以进行访问。    </p><h2 id="2-2方法"><a href="#2-2方法" class="headerlink" title="2.2方法"></a>2.2方法</h2><pre class="line-numbers language-java"><code class="language-java">对于 Request 中的域属性操作的方法有：<span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Object object<span class="token punctuation">)</span>：在 Request 域属性空间中放入数据。其生命周期与 Request 的生命周期相同。Object <span class="token function">getAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>：从 Request 的域属性空间中获取指定名称的数据。<span class="token keyword">void</span> <span class="token function">removeAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>：从Request 的域属性空间中删除指定名称的数据。由于这里我们举例子需要用到另外一个方法，所以将这个方法也进行介绍。RequestDispatcher <span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span><span class="token punctuation">;</span>该方法用于创建请求转发器，而该请求转发器有一个方法 <span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span>，用于完成将请求对象转发给下一个资源。<span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法的原型如下：<span class="token keyword">void</span> <span class="token function">forward</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、Session-域"><a href="#三、Session-域" class="headerlink" title="三、Session 域"></a>三、Session 域</h1><h2 id="3-1Session"><a href="#3-1Session" class="headerlink" title="3.1Session"></a>3.1Session</h2><ul><li>Session 是一个专门用于存放数据的集合，我们一般称这个用于存放数据的内存空间为域属性空间，简称域。HttpSession 中具有三个方法，是专门用于对该域属性空间中数据进行写、读操作的。     </li><li>若要对 Session 进行操作，则可以通过 HttpServletRequest 的 getSession()方法获取。该方法具有两个重载的方法。public HttpSession getSession(boolean create)和public HttpSession getSession()      </li></ul><h2 id="3-2方法"><a href="#3-2方法" class="headerlink" title="3.2方法"></a>3.2方法</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span>该方法用于向 Session 的域属性空间中放入指定名称、指定值的域属性。<span class="token keyword">public</span> Object <span class="token function">getAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>该方法用于从 Session 的域属性空间中读取指定名称为域属性值。<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>该方法用于从 Session 的域属性空间中删除指定名称的域属性。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、EL表达式不同域取值"><a href="#四、EL表达式不同域取值" class="headerlink" title="四、EL表达式不同域取值"></a>四、EL表达式不同域取值</h1><p>{域名称.键名}：从指定域中获取指定键的值<br>域名称：   </p><ol><li>pageScope –&gt; pageContext   </li><li>requestScope –&gt; request    </li><li>sessionScope –&gt; session    </li><li>applicationScope –&gt; application（ServletContext）    <pre class="line-numbers language-java"><code class="language-java">举例：在request域中存储了name<span class="token operator">=</span>张三获取：$<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>requestScope<span class="token punctuation">.</span>name<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><pre><code></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础--异常</title>
      <link href="/posts/2502667308.html"/>
      <url>/posts/2502667308.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1、异常分类"><a href="#1、异常分类" class="headerlink" title="1、异常分类"></a>1、异常分类</h1><p>Throwable(异常根类）其下有两个子类：Error与Excepetion<br>error：是程序当中无法处理的错误，表示运行应用程序中较严重问题。<br>Excepetion：程序本身可以处理的异常。<br><a href="https://s1.ax1x.com/2020/09/12/wUX0BT.jpg"><img src="https://s1.ax1x.com/2020/09/12/wUX0BT.jpg"></a>    </p><h1 id="2、异常的两种处理机制："><a href="#2、异常的两种处理机制：" class="headerlink" title="2、异常的两种处理机制："></a>2、异常的两种处理机制：</h1><ol><li>抛出异常：当一个方法中出现错误引发异常时，方法就会创建<br>异常对象（包含异常类型和异常出现时的程序状态等），并将其交给运行系统进行处理      </li><li>捕获异常：运行时系统捕获异常就会进入到捕获环节，运行系统就会去寻找与抛出异常匹配的处理器，如找则会处理相关的处理逻辑。    </li><li>捕获异常：<br>try:执行可能产生的异常的代码<br>catch:捕获异常<br>finally：无论是否发生异常代码总能执行<br>声明异常：<br>throws:声明可能抛出的异常<br>throw:手动抛出异常<br>关键字组合：try-catch-finally:try<br>语法：<br>try{<br>//代码段1<br>//产生异常的代码段2，可能会出错的代码<br>}catch(异常类型 ex)//接收错误信息{<br>//对异常进行处理的代码段3<br>ex.printStackTrace();//输出错误信息<br>}finally{<br>//代码段四<br>}<br>1、try块用于捕获异常<br>2、catch块用于处理try捕获到的异常<br>3、finally块无论是否发生异常代码总能执行<br>4、try块后可以接零个或者多个catch块，如果没有catch块，则必须跟一个finally块进行使用<br>5、catch和finally没有try的加入无法单独行动    </li></ol><p>注：一个try块下，所跟的多个catch的时候，不能出现同类型异常，且在最后catch块的地方加上父类异常Exception囊括漏网之鱼，增加安全性。</p><h1 id="3、使用throw和throws如何处理异常"><a href="#3、使用throw和throws如何处理异常" class="headerlink" title="3、使用throw和throws如何处理异常"></a>3、使用throw和throws如何处理异常</h1><ol><li>可以通过throws声明将要抛出何种类型的异常，通过throw将产生的异常抛出。    </li><li>如果一个方法可能会出现异常，但没有能力处理这种异常，可以在方法声明处用throws子句来声明抛出异常。谁调用这个方法则谁处理抛出的异常。    </li><li>throw抛出异常用父类Exception的话，Exception有一个带字符串参数的构造方法。不过，后面该异常要么通过throws抛出，谁调谁处理。要么自己添加try-catch，自己抛，自己处理。如下图代码：<br><a href="https://s1.ax1x.com/2020/09/17/wRnUde.jpg"><img src="https://s1.ax1x.com/2020/09/17/wRnUde.jpg"></a>    </li></ol><p>总结：throw抛出异常对象的处理方案      </p><ul><li>1.通过try..catch包含throw语句–自己抛出的异常自己处理    </li><li>2.通过throws在方法声明处抛出可能出现的异常类型, 谁调用谁用try-catch处理-可以自己处理,也可以继续上抛   </li><li>3.throws可以抛出throw对象相同的类型或其父类,不可以抛出其子类    </li><li>4.throw手动抛出的异常不应该用非检查类型,因为编译器不提示     </li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础语法--方法基础</title>
      <link href="/posts/2417257089.html"/>
      <url>/posts/2417257089.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1、方法学习"><a href="#1、方法学习" class="headerlink" title="1、方法学习"></a>1、方法学习</h1><p>方法定义：所谓方法，就是用一类问题的代码的有序组合，是一个功能模块。<br>如：Scanner sc=new Scanner(System.in);   //sc为Scanner 类的对象 我们创建的，Scanner Scanner是jdk为我们提供的类，可以直接拿来使用；<br>sc.nextInt();   //sc.后面的是当面   这是用对象名来调用Scanner类里面的方法     </p><h2 id="1-1、方法声明"><a href="#1-1、方法声明" class="headerlink" title="1.1、方法声明"></a>1.1、方法声明</h2><p>语法格式：<br>访问修饰符 返回类型 方法名（参数列表）{<br>    方法体<br>}<br>注意：方法在类的内部定义<br>1、无参无返回值方法<br>eg：     </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lac<span class="token punctuation">.</span>method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打印输出星号的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//public公共的  修饰符</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//main方法开始，就会创建一个MethodDemo类的对象methodDemo</span>        MethodDemo methodDemo<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MethodDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用对象名.方法名()去调用方法</span>        methodDemo<span class="token punctuation">.</span><span class="token function">printStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"欢迎来到Java世界！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        methodDemo<span class="token punctuation">.</span><span class="token function">printStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2、方法重载"><a href="#1-2、方法重载" class="headerlink" title="1.2、方法重载"></a>1.2、方法重载</h2><p>定义：</p><ol><li>在同一个类中;</li><li>方法名相同，方法的参数不同（参数顺序、个数、类型）;</li><li>方法返回值、访问修饰符任意;</li><li>与方法的参数名无关.     </li></ol><p>1、注：当参数列表里有两个以上参数时，可变参数一定是在最后的<br>eg：public void sum(int… n){}</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArgsDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求和</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//int i:n每次从可变参数列表当中去一个元素n放到i中进行操作，直到取完所有的元素循环结束</span>            sum<span class="token operator">+=</span>i<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum="</span><span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>`    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ArgsDemo ad<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArgsDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ad<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ad<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ad<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、结论：数组是可以和可变参数列表进行兼容的，可以向其传值，反之不行。      </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//查找</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注：当参数列表里有两个以上参数时，可变参数一定是在最后的</span>        <span class="token keyword">boolean</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token operator">:</span>a<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a1<span class="token operator">==</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"找到了！"</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没找到！"</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ArgsDemo1 ad<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArgsDemo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ad<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        ad<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//结论可以将数组的值传递给可变参数列表</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 3、注：在一个方法中只能有一个可变参数列表<br> 4、注：可变参数列表所在的方法是最后被访问的。      </p><h1 id="2、JAVA-文档注释"><a href="#2、JAVA-文档注释" class="headerlink" title="2、JAVA 文档注释"></a>2、JAVA 文档注释</h1><p>定义：Java 支持三种注释方式。前两种分别是 // 和 /* <em>/，第三种被称作说明注释，它以 /</em>* 开始，以 */结束。      </p><p>作用及使用：</p><ul><li>说明注释允许你在程序中嵌入关于程序的信息。你可以使用 javadoc 工具软件来生成信息，并输出到HTML文件中。作用及使用：说明注释允许你在程序中嵌入关于程序的信息。你可以使用 javadoc 工具软件来生成信息，并输出到HTML文件中。说明注释，使你更加方便的记录你的程序信息。       </li></ul><p>eg:javadoc -d doc ArgsDemo1.java<br><a href="https://s1.ax1x.com/2020/08/09/aogyBn.png"><img src="https://s1.ax1x.com/2020/08/09/aogyBn.png"></a></p><h1 id="3、方法调试"><a href="#3、方法调试" class="headerlink" title="3、方法调试"></a>3、方法调试</h1><ol><li>按键：F6执行下一步      </li><li>F5跳到我们定义的方法中    </li><li>F7从定义的方法中跳转到主方法    </li></ol><h1 id="附加：随机产生从0到2中一个数"><a href="#附加：随机产生从0到2中一个数" class="headerlink" title="附加：随机产生从0到2中一个数"></a>附加：随机产生从0到2中一个数</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//随机产生从0到2中一个数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础--对象定义</title>
      <link href="/posts/2499841525.html"/>
      <url>/posts/2499841525.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1、类和对象"><a href="#1、类和对象" class="headerlink" title="1、类和对象"></a>1、类和对象</h1><p>类   ：是模子，确定对象将会拥有的特性（属性），和行为（方法）；<br>对象 ：是类的实例的表现。<br>类   ： 是对象的类型：<br>对象 ： 是特定类型的数据。<br>总结 ：类和对象的关系是，所谓的类就是一个抽象的概念，在现实中就如同虚拟存在一样，描述了一个模板，它限定了一种类型中里面应该有什么，能够做什么；而对象就是由一个类实例产生的具体体现，就是说真正看得见摸得着的就是对象，真正能够干活的也是对象。下面就是在实际开发过程中对象和类的开发关系，通过创建类来实例化出对象，来完成相应的程序开发逻辑。<br><a href="https://s1.ax1x.com/2020/08/09/aoyk6A.png" title="实例化"><img src="https://s1.ax1x.com/2020/08/09/aoyk6A.png" alt="实例化" title="实例化"></a><br>创建类：<br>eg:    </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//成员属性：昵称、年龄、体重、品种</span>    String name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//昵称 String类型默认值null</span>    <span class="token keyword">int</span> month<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//年龄 int类型默认值0</span>    <span class="token keyword">double</span> weight<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//体重 double类型默认值0.0</span>    String species<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//品种</span>    <span class="token keyword">public</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是无参构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Cat</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是带参构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Cat</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> month<span class="token punctuation">,</span><span class="token keyword">double</span> weight<span class="token punctuation">,</span>String species<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>month<span class="token operator">=</span>month<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weight<span class="token operator">=</span>weight<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>species<span class="token operator">=</span>species<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    public void Cat()&amp;#123;</span><span class="token comment" spellcheck="true">//        System.out.println("我只是一个普通的方法，恰好方法名叫Cat");</span><span class="token comment" spellcheck="true">//    &amp;#125;</span>    <span class="token comment" spellcheck="true">//成员方法：跑动、吃东西</span>    <span class="token comment" spellcheck="true">//跑动的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        Cat();</span>        <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小猫快跑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"快跑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//吃东西的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小猫吃鱼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类：声明对象和实例化对象<br>eg：    </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//单一职责原则</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CatTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对象实例化</span>        Cat one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"花花"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token string">"英国短毛猫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 测试</span><span class="token comment" spellcheck="true">//        one.name = "花花";</span><span class="token comment" spellcheck="true">//        one.month = 2;</span><span class="token comment" spellcheck="true">//        one.weight = 1000;</span><span class="token comment" spellcheck="true">//        one.species = "英国短毛猫";</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"昵称："</span> <span class="token operator">+</span> one<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄："</span> <span class="token operator">+</span> one<span class="token punctuation">.</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"体重："</span> <span class="token operator">+</span> one<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"品种："</span> <span class="token operator">+</span> one<span class="token punctuation">.</span>species<span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        one.Cat();</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="单一原则："><a href="#单一原则：" class="headerlink" title="单一原则："></a>单一原则：</h4><p>具有不同行为的类应该封装到不同的类中，这样会避免很多开发中的问题排查。如下是对象实例化的过程部分：<br><a href="https://s1.ax1x.com/2020/08/09/aoyqN8.png"><img src="https://s1.ax1x.com/2020/08/09/aoyqN8.png"></a><br>声明对象在栈中进行，实例化对象是在堆里，关联是通过=赋值符号进行关联，把堆里面的新开发出的一块内存空间地址存放到栈的one空间当中（相当于把一座房子的钥匙交到了one手里，有了房子的钥匙，随便干嘛都行），最后one指向堆中的空间地址，空间地址就如同房子一样，可堆其进行操作；而在栈当中其实存入的是堆中一个地址的引入。<br><a href="https://s1.ax1x.com/2020/08/09/ao6NDI.png"><img src="https://s1.ax1x.com/2020/08/09/ao6NDI.png"></a><br>总结： “堆”空间用于存储使用new关键字所创建的对象；栈空间用于存储程序运行时在方法中声明的所有的局部变量。     </p><h1 id="2、构造方法（构造函数，构造器）"><a href="#2、构造方法（构造函数，构造器）" class="headerlink" title="2、构造方法（构造函数，构造器）"></a>2、构造方法（构造函数，构造器）</h1><p>它是new 关键字的好搭档 构造方法(不能单独调用)只能配合new关键字调用。     </p><ol><li>构造方法”与类同名”且”没有返回值”;     </li><li>构造方法的语法格式；     <blockquote><p>public(访问修饰符)(没有返回值类型)构造方法名(与类名相同)((可以指定参数)){<br>//初始化代码<br>}      </p></blockquote></li><li>只能在对象实例化的时候调用    </li><li>当没有指定构造方法时，系统会自动添加无参的构造方法    </li><li>当有指定构造方法、无论是有参、无参的构造方法，都不  会自动添加无参的构造方法      </li><li>一个类中可以有多个构造方法<h4 id="就近原则："><a href="#就近原则：" class="headerlink" title="就近原则："></a>就近原则：</h4>赋值过程中先优先的去找同一个作用范围内的成员进行赋值操作只有找不到的情况下才会扩大作用范围，去类里面找//这个例子中构造方法把得到的值赋给了自己的参数变量。赋值过程中先优先的去找同一个作用范围内的成员进行赋值操作只有找不到的情况下才会扩大作用范围，去类里面找//这个例子中构造方法把得到的值赋给了自己的参数变量。<br>#####this对象的使用：   </li></ol><ul><li>this关键字表示的是当前对象（什么是当前对象？谁调用了它谁就是当前对象）    </li><li>this既可以调用属性又可以调用方法。this既可以调用属性又可以调用方法。<br>注：相同类里面的普通方法之间是可以相互调用的，不用加this构造方法不能被普通成员方法调用。<br>eg:    </li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lac<span class="token punctuation">.</span>duixiang<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Monkey</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//属性：姓名（name）、特征（feature）</span>    String name<span class="token punctuation">;</span>    String feature<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无参的构造方法（默认初始化name和feature的属性值，属性值参考效果图）</span>    <span class="token keyword">public</span> <span class="token function">Monkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是使用无参构造产生的猴子："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        name<span class="token operator">=</span><span class="token string">"长尾猴"</span><span class="token punctuation">;</span>        feature<span class="token operator">=</span><span class="token string">"尾巴长"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//System.out.println("名称："+this.name+"\n"+"特征："+this.feature);</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//带参的构造方法（接收外部传入的参数，分别向 name 和 feature 赋值）</span>    <span class="token keyword">public</span> <span class="token function">Monkey</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>String feature<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是使用有参构造产生的猴子："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//this是指当前对象mk1</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>feature<span class="token operator">=</span>feature<span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类：   </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lac<span class="token punctuation">.</span>duixiang<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用无参构造方法实例对象</span>         Monkey mk<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Monkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当实例化对象时，会自动去执行构造方法</span>        <span class="token comment" spellcheck="true">//打印输出对象属性</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"名称："</span><span class="token operator">+</span>mk<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span><span class="token string">"特征："</span><span class="token operator">+</span>mk<span class="token punctuation">.</span>feature<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用带参构造方法实例对象</span>         Monkey mk1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Monkey</span><span class="token punctuation">(</span><span class="token string">"白头叶猴"</span><span class="token punctuation">,</span><span class="token string">"头上有白毛，喜欢吃树叶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当实例化对象时，会自动去执行构造方法</span>        <span class="token comment" spellcheck="true">//打印输出对象属性</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"名称："</span><span class="token operator">+</span>mk1<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span><span class="token string">"特征："</span><span class="token operator">+</span>mk<span class="token punctuation">.</span>feature<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>输出结果：我是使用无参构造产生的猴子：名称：长尾猴特征：尾巴长我是使用有参构造产生的猴子：名称：白头叶猴</code></pre><p>###总结:</p><h5 id="构造方法："><a href="#构造方法：" class="headerlink" title="构造方法："></a>构造方法：</h5><p>1、构造方法与类同名且没有返回值；<br>2、只能在对象实例化的时候调用；<br>3、一个类中可以由多个构造方法—方法重载；<br>4、当没有指定构造方法时，系统会自动添加无参的构造方法；<br>5、当有指定构造方法，无论是有参、无参的构造方法，都不会自动添加无参的构造方法；<br>6、构造方法的类中不可以直接调用成员方法，而普通方法可以在同一个类中相互调用；<br>7、在带参构造方法中可以直接用this（）；直接调用同一个类中的无参构造方法；<br>8、this相当于对象实例化中的方法名；<br>9、Java中的this关键字的应用，可以在构造方法中通过this()的方式调用同类的其他构造方法，但必须放在第一句，因此“不能在构造方法中调用同一个类的其他构造方法”和“在构造方法在中如果使用this调用其他构造方法，语句可以放在任意位置”的说法是错误的；<br>10、构造方法没有返回值。    </p><h5 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h5><p>this：当前对象的默认引用<br>this的使用<br>1、调用成员属性，解决成员属性和局部变量同名冲突；<br>2、调用同一个类的成员方法，也可以不加this；<br>3、调用重载的构造方法：在带参构造方法中可以直接用this（）；直接调用同一个类中的无参构造方法，只能放在方法中的第一条。    </p>]]></content>
      
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象定义</title>
      <link href="/posts/2499841526.html"/>
      <url>/posts/2499841526.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1、类和对象"><a href="#1、类和对象" class="headerlink" title="1、类和对象"></a>1、类和对象</h1><p>类   ：是模子，确定对象将会拥有的特性（属性），和行为（方法）；<br>对象 ：是类的实例的表现。<br>类   ： 是对象的类型：<br>对象 ： 是特定类型的数据。<br>总结 ：类和对象的关系是，所谓的类就是一个抽象的概念，在现实中就如同虚拟存在一样，描述了一个模板，它限定了一种类型中里面应该有什么，能够做什么；而对象就是由一个类实例产生的具体体现，就是说真正看得见摸得着的就是对象，真正能够干活的也是对象。下面就是在实际开发过程中对象和类的开发关系，通过创建类来实例化出对象，来完成相应的程序开发逻辑。<br><a href="https://s1.ax1x.com/2020/08/09/aoyk6A.png" title="实例化"><img src="https://s1.ax1x.com/2020/08/09/aoyk6A.png" alt="实例化" title="实例化"></a><br>创建类：<br>eg:    </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//成员属性：昵称、年龄、体重、品种</span>    String name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//昵称 String类型默认值null</span>    <span class="token keyword">int</span> month<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//年龄 int类型默认值0</span>    <span class="token keyword">double</span> weight<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//体重 double类型默认值0.0</span>    String species<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//品种</span>    <span class="token keyword">public</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是无参构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Cat</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是带参构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Cat</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> month<span class="token punctuation">,</span><span class="token keyword">double</span> weight<span class="token punctuation">,</span>String species<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>month<span class="token operator">=</span>month<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weight<span class="token operator">=</span>weight<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>species<span class="token operator">=</span>species<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    public void Cat()&amp;#123;</span><span class="token comment" spellcheck="true">//        System.out.println("我只是一个普通的方法，恰好方法名叫Cat");</span><span class="token comment" spellcheck="true">//    &amp;#125;</span>    <span class="token comment" spellcheck="true">//成员方法：跑动、吃东西</span>    <span class="token comment" spellcheck="true">//跑动的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        Cat();</span>        <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小猫快跑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"快跑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//吃东西的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小猫吃鱼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类：声明对象和实例化对象<br>eg：    </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//单一职责原则</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CatTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对象实例化</span>        Cat one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"花花"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token string">"英国短毛猫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 测试</span><span class="token comment" spellcheck="true">//        one.name = "花花";</span><span class="token comment" spellcheck="true">//        one.month = 2;</span><span class="token comment" spellcheck="true">//        one.weight = 1000;</span><span class="token comment" spellcheck="true">//        one.species = "英国短毛猫";</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"昵称："</span> <span class="token operator">+</span> one<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄："</span> <span class="token operator">+</span> one<span class="token punctuation">.</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"体重："</span> <span class="token operator">+</span> one<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"品种："</span> <span class="token operator">+</span> one<span class="token punctuation">.</span>species<span class="token punctuation">)</span><span class="token punctuation">;</span>        one<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        one.Cat();</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="单一原则："><a href="#单一原则：" class="headerlink" title="单一原则："></a>单一原则：</h4><p>具有不同行为的类应该封装到不同的类中，这样会避免很多开发中的问题排查。如下是对象实例化的过程部分：<br><a href="https://s1.ax1x.com/2020/08/09/aoyqN8.png"><img src="https://s1.ax1x.com/2020/08/09/aoyqN8.png"></a><br>声明对象在栈中进行，实例化对象是在堆里，关联是通过=赋值符号进行关联，把堆里面的新开发出的一块内存空间地址存放到栈的one空间当中（相当于把一座房子的钥匙交到了one手里，有了房子的钥匙，随便干嘛都行），最后one指向堆中的空间地址，空间地址就如同房子一样，可堆其进行操作；而在栈当中其实存入的是堆中一个地址的引入。<br><a href="https://s1.ax1x.com/2020/08/09/ao6NDI.png"><img src="https://s1.ax1x.com/2020/08/09/ao6NDI.png"></a><br>总结： “堆”空间用于存储使用new关键字所创建的对象；栈空间用于存储程序运行时在方法中声明的所有的局部变量。     </p><h1 id="2、构造方法（构造函数，构造器）"><a href="#2、构造方法（构造函数，构造器）" class="headerlink" title="2、构造方法（构造函数，构造器）"></a>2、构造方法（构造函数，构造器）</h1><p>它是new 关键字的好搭档 构造方法(不能单独调用)只能配合new关键字调用。     </p><ol><li>构造方法”与类同名”且”没有返回值”;     </li><li>构造方法的语法格式；     <blockquote><p>public(访问修饰符)(没有返回值类型)构造方法名(与类名相同)((可以指定参数)){<br>//初始化代码<br>}      </p></blockquote></li><li>只能在对象实例化的时候调用    </li><li>当没有指定构造方法时，系统会自动添加无参的构造方法    </li><li>当有指定构造方法、无论是有参、无参的构造方法，都不  会自动添加无参的构造方法      </li><li>一个类中可以有多个构造方法<h4 id="就近原则："><a href="#就近原则：" class="headerlink" title="就近原则："></a>就近原则：</h4>赋值过程中先优先的去找同一个作用范围内的成员进行赋值操作只有找不到的情况下才会扩大作用范围，去类里面找//这个例子中构造方法把得到的值赋给了自己的参数变量。赋值过程中先优先的去找同一个作用范围内的成员进行赋值操作只有找不到的情况下才会扩大作用范围，去类里面找//这个例子中构造方法把得到的值赋给了自己的参数变量。<br>#####this对象的使用：   </li></ol><ul><li>this关键字表示的是当前对象（什么是当前对象？谁调用了它谁就是当前对象）    </li><li>this既可以调用属性又可以调用方法。this既可以调用属性又可以调用方法。<br>注：相同类里面的普通方法之间是可以相互调用的，不用加this构造方法不能被普通成员方法调用。<br>eg:    </li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lac<span class="token punctuation">.</span>duixiang<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Monkey</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//属性：姓名（name）、特征（feature）</span>    String name<span class="token punctuation">;</span>    String feature<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无参的构造方法（默认初始化name和feature的属性值，属性值参考效果图）</span>    <span class="token keyword">public</span> <span class="token function">Monkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是使用无参构造产生的猴子："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        name<span class="token operator">=</span><span class="token string">"长尾猴"</span><span class="token punctuation">;</span>        feature<span class="token operator">=</span><span class="token string">"尾巴长"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//System.out.println("名称："+this.name+"\n"+"特征："+this.feature);</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//带参的构造方法（接收外部传入的参数，分别向 name 和 feature 赋值）</span>    <span class="token keyword">public</span> <span class="token function">Monkey</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>String feature<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是使用有参构造产生的猴子："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//this是指当前对象mk1</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>feature<span class="token operator">=</span>feature<span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类：   </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lac<span class="token punctuation">.</span>duixiang<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用无参构造方法实例对象</span>         Monkey mk<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Monkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当实例化对象时，会自动去执行构造方法</span>        <span class="token comment" spellcheck="true">//打印输出对象属性</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"名称："</span><span class="token operator">+</span>mk<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span><span class="token string">"特征："</span><span class="token operator">+</span>mk<span class="token punctuation">.</span>feature<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用带参构造方法实例对象</span>         Monkey mk1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Monkey</span><span class="token punctuation">(</span><span class="token string">"白头叶猴"</span><span class="token punctuation">,</span><span class="token string">"头上有白毛，喜欢吃树叶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当实例化对象时，会自动去执行构造方法</span>        <span class="token comment" spellcheck="true">//打印输出对象属性</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"名称："</span><span class="token operator">+</span>mk1<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span><span class="token string">"特征："</span><span class="token operator">+</span>mk<span class="token punctuation">.</span>feature<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>输出结果：我是使用无参构造产生的猴子：名称：长尾猴特征：尾巴长我是使用有参构造产生的猴子：名称：白头叶猴</code></pre><p>###总结:</p><h5 id="构造方法："><a href="#构造方法：" class="headerlink" title="构造方法："></a>构造方法：</h5><p>1、构造方法与类同名且没有返回值；<br>2、只能在对象实例化的时候调用；<br>3、一个类中可以由多个构造方法—方法重载；<br>4、当没有指定构造方法时，系统会自动添加无参的构造方法；<br>5、当有指定构造方法，无论是有参、无参的构造方法，都不会自动添加无参的构造方法；<br>6、构造方法的类中不可以直接调用成员方法，而普通方法可以在同一个类中相互调用；<br>7、在带参构造方法中可以直接用this（）；直接调用同一个类中的无参构造方法；<br>8、this相当于对象实例化中的方法名；<br>9、Java中的this关键字的应用，可以在构造方法中通过this()的方式调用同类的其他构造方法，但必须放在第一句，因此“不能在构造方法中调用同一个类的其他构造方法”和“在构造方法在中如果使用this调用其他构造方法，语句可以放在任意位置”的说法是错误的；<br>10、构造方法没有返回值。    </p><h5 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h5><p>this：当前对象的默认引用<br>this的使用<br>1、调用成员属性，解决成员属性和局部变量同名冲突；<br>2、调用同一个类的成员方法，也可以不加this；<br>3、调用重载的构造方法：在带参构造方法中可以直接用this（）；直接调用同一个类中的无参构造方法，只能放在方法中的第一条。    </p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/hello%20world.html"/>
      <url>/posts/hello%20world.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="引言"><a href="#引言" class="headerlink" title="引言:"></a>引言:</h5><p>Hello World！ 新的故事从这里开始！</p><p>希望这里有满满的回忆，少年！</p><p>明月何皎皎，照我罗床帏。</p><p>忧愁不能寐，揽衣起徘徊。</p><p>客行虽云乐，不如早旋归。</p><p>出户独彷徨，愁思当告谁。</p><p>引领还入房，泪下沾裳衣。</p><p>continue</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
